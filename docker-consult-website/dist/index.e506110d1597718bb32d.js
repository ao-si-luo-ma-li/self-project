webpackJsonp([1],{0:function(module,exports,__webpack_require__){eval("'use strict';\n\n__webpack_require__(2);\n\n__webpack_require__(6);\n\n__webpack_require__(8);\n\nvar Swiper = __webpack_require__(13);\n\n// 主导航轮播\nvar mySwiper = new Swiper('.swiper-container', {\n  loop: true, // 循环模式选项\n\n  // 如果需要分页器\n  pagination: {\n    el: '.swiper-pagination'\n  },\n\n  // 如果需要前进后退按钮\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev'\n  }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbmRleC5qcz82YzY2Il0sIm5hbWVzIjpbIlN3aXBlciIsInJlcXVpcmUiLCJteVN3aXBlciIsImxvb3AiLCJwYWdpbmF0aW9uIiwiZWwiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOztBQUNBOztBQUNBLElBQU1BLFNBQVMsbUJBQUFDLENBQVEsRUFBUixDQUFmOztBQUVBO0FBQ0EsSUFBSUMsV0FBVyxJQUFJRixNQUFKLENBQVksbUJBQVosRUFBaUM7QUFDOUNHLFFBQU0sSUFEd0MsRUFDbEM7O0FBRVo7QUFDQUMsY0FBWTtBQUNWQyxRQUFJO0FBRE0sR0FKa0M7O0FBUTlDO0FBQ0FDLGNBQVk7QUFDVkMsWUFBUSxxQkFERTtBQUVWQyxZQUFRO0FBRkU7QUFUa0MsQ0FBakMsQ0FBZiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy9jb21tb24vcmVzZXQuc2Nzcyc7XHJcblxyXG5pbXBvcnQgJy4vY29tbW9uL25hdi5qcyc7XHJcbmltcG9ydCAnLi4vYXNzZXRzL3Njc3MvbWFpbi5zY3NzJztcclxuY29uc3QgU3dpcGVyID0gcmVxdWlyZSgnLi4vbGliL3N3aXBlcicpXHJcblxyXG4vLyDkuLvlr7zoiKrova7mkq1cclxudmFyIG15U3dpcGVyID0gbmV3IFN3aXBlciAoJy5zd2lwZXItY29udGFpbmVyJywge1xyXG4gIGxvb3A6IHRydWUsIC8vIOW+queOr+aooeW8j+mAiemhuVxyXG4gIFxyXG4gIC8vIOWmguaenOmcgOimgeWIhumhteWZqFxyXG4gIHBhZ2luYXRpb246IHtcclxuICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICB9LFxyXG4gIFxyXG4gIC8vIOWmguaenOmcgOimgeWJjei/m+WQjumAgOaMiemSrlxyXG4gIG5hdmlnYXRpb246IHtcclxuICAgIG5leHRFbDogJy5zd2lwZXItYnV0dG9uLW5leHQnLFxyXG4gICAgcHJldkVsOiAnLnN3aXBlci1idXR0b24tcHJldicsXHJcbiAgfSxcclxufSkgXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},13:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n/**\n * Swiper 6.8.4\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: August 23, 2021\n */\n\n!function (e, t) {\n    "object" == ( false ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (e = "undefined" != typeof globalThis ? globalThis : e || self).Swiper = t();\n}(undefined, function () {\n    "use strict";\n\n    function e(e, t) {\n        for (var a = 0; a < t.length; a++) {\n            var i = t[a];\n            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);\n        }\n    }\n    function t() {\n        return (t = Object.assign || function (e) {\n            for (var t = 1; t < arguments.length; t++) {\n                var a = arguments[t];\n                for (var i in a) {\n                    Object.prototype.hasOwnProperty.call(a, i) && (e[i] = a[i]);\n                }\n            }\n            return e;\n        }).apply(this, arguments);\n    }\n    function a(e) {\n        return null !== e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "constructor" in e && e.constructor === Object;\n    }\n    function i(e, t) {\n        void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach(function (s) {\n            void 0 === e[s] ? e[s] = t[s] : a(t[s]) && a(e[s]) && Object.keys(t[s]).length > 0 && i(e[s], t[s]);\n        });\n    }\n    var s = {\n        body: {},\n        addEventListener: function addEventListener() {},\n        removeEventListener: function removeEventListener() {},\n        activeElement: {\n            blur: function blur() {},\n            nodeName: ""\n        },\n        querySelector: function querySelector() {\n            return null;\n        },\n        querySelectorAll: function querySelectorAll() {\n            return [];\n        },\n        getElementById: function getElementById() {\n            return null;\n        },\n        createEvent: function createEvent() {\n            return {\n                initEvent: function initEvent() {}\n            };\n        },\n        createElement: function createElement() {\n            return {\n                children: [],\n                childNodes: [],\n                style: {},\n                setAttribute: function setAttribute() {},\n                getElementsByTagName: function getElementsByTagName() {\n                    return [];\n                }\n            };\n        },\n        createElementNS: function createElementNS() {\n            return {};\n        },\n        importNode: function importNode() {\n            return null;\n        },\n        location: {\n            hash: "",\n            host: "",\n            hostname: "",\n            href: "",\n            origin: "",\n            pathname: "",\n            protocol: "",\n            search: ""\n        }\n    };\n    function r() {\n        var e = "undefined" != typeof document ? document : {};\n        return i(e, s), e;\n    }\n    var n = {\n        document: s,\n        navigator: {\n            userAgent: ""\n        },\n        location: {\n            hash: "",\n            host: "",\n            hostname: "",\n            href: "",\n            origin: "",\n            pathname: "",\n            protocol: "",\n            search: ""\n        },\n        history: {\n            replaceState: function replaceState() {},\n            pushState: function pushState() {},\n            go: function go() {},\n            back: function back() {}\n        },\n        CustomEvent: function CustomEvent() {\n            return this;\n        },\n        addEventListener: function addEventListener() {},\n        removeEventListener: function removeEventListener() {},\n        getComputedStyle: function getComputedStyle() {\n            return {\n                getPropertyValue: function getPropertyValue() {\n                    return "";\n                }\n            };\n        },\n        Image: function Image() {},\n        Date: function Date() {},\n        screen: {},\n        setTimeout: function setTimeout() {},\n        clearTimeout: function clearTimeout() {},\n        matchMedia: function matchMedia() {\n            return {};\n        },\n        requestAnimationFrame: function requestAnimationFrame(e) {\n            return "undefined" == typeof setTimeout ? (e(), null) : setTimeout(e, 0);\n        },\n        cancelAnimationFrame: function cancelAnimationFrame(e) {\n            "undefined" != typeof setTimeout && clearTimeout(e);\n        }\n    };\n    function l() {\n        var e = "undefined" != typeof window ? window : {};\n        return i(e, n), e;\n    }\n    function o(e) {\n        return (o = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n            return e.__proto__ || Object.getPrototypeOf(e);\n        })(e);\n    }\n    function d(e, t) {\n        return (d = Object.setPrototypeOf || function (e, t) {\n            return e.__proto__ = t, e;\n        })(e, t);\n    }\n    function p() {\n        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;\n        if (Reflect.construct.sham) return !1;\n        if ("function" == typeof Proxy) return !0;\n        try {\n            return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n        } catch (e) {\n            return !1;\n        }\n    }\n    function u(e, t, a) {\n        return (u = p() ? Reflect.construct : function (e, t, a) {\n            var i = [null];\n            i.push.apply(i, t);\n            var s = new (Function.bind.apply(e, i))();\n            return a && d(s, a.prototype), s;\n        }).apply(null, arguments);\n    }\n    function c(e) {\n        var t = "function" == typeof Map ? new Map() : void 0;\n        return (c = function c(e) {\n            if (null === e || (a = e, -1 === Function.toString.call(a).indexOf("[native code]"))) return e;\n            var a;\n            if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");\n            if (void 0 !== t) {\n                if (t.has(e)) return t.get(e);\n                t.set(e, i);\n            }\n            function i() {\n                return u(e, arguments, o(this).constructor);\n            }\n            return i.prototype = Object.create(e.prototype, {\n                constructor: {\n                    value: i,\n                    enumerable: !1,\n                    writable: !0,\n                    configurable: !0\n                }\n            }), d(i, e);\n        })(e);\n    }\n    var h = function (e) {\n        var t, a;\n        function i(t) {\n            var a, i, s;\n            return a = e.call.apply(e, [this].concat(t)) || this, i = function (e) {\n                if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n                return e;\n            }(a), s = i.__proto__, Object.defineProperty(i, "__proto__", {\n                get: function get() {\n                    return s;\n                },\n                set: function set(e) {\n                    s.__proto__ = e;\n                }\n            }), a;\n        }\n        return a = e, (t = i).prototype = Object.create(a.prototype), t.prototype.constructor = t, t.__proto__ = a, i;\n    }(c(Array));\n    function v(e) {\n        void 0 === e && (e = []);\n        var t = [];\n        return e.forEach(function (e) {\n            Array.isArray(e) ? t.push.apply(t, v(e)) : t.push(e);\n        }), t;\n    }\n    function f(e, t) {\n        return Array.prototype.filter.call(e, t);\n    }\n    function m(e, t) {\n        var a = l(),\n            i = r(),\n            s = [];\n        if (!t && e instanceof h) return e;\n        if (!e) return new h(s);\n        if ("string" == typeof e) {\n            var n = e.trim();\n            if (n.indexOf("<") >= 0 && n.indexOf(">") >= 0) {\n                var o = "div";\n                0 === n.indexOf("<li") && (o = "ul"), 0 === n.indexOf("<tr") && (o = "tbody"), 0 !== n.indexOf("<td") && 0 !== n.indexOf("<th") || (o = "tr"), 0 === n.indexOf("<tbody") && (o = "table"), 0 === n.indexOf("<option") && (o = "select");\n                var d = i.createElement(o);\n                d.innerHTML = n;\n                for (var p = 0; p < d.childNodes.length; p += 1) {\n                    s.push(d.childNodes[p]);\n                }\n            } else s = function (e, t) {\n                if ("string" != typeof e) return [e];\n                for (var a = [], i = t.querySelectorAll(e), s = 0; s < i.length; s += 1) {\n                    a.push(i[s]);\n                }return a;\n            }(e.trim(), t || i);\n        } else if (e.nodeType || e === a || e === i) s.push(e);else if (Array.isArray(e)) {\n            if (e instanceof h) return e;\n            s = e;\n        }\n        return new h(function (e) {\n            for (var t = [], a = 0; a < e.length; a += 1) {\n                -1 === t.indexOf(e[a]) && t.push(e[a]);\n            }return t;\n        }(s));\n    }\n    m.fn = h.prototype;\n    var g,\n        b,\n        w,\n        y = {\n        addClass: function addClass() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = v(t.map(function (e) {\n                return e.split(" ");\n            }));\n            return this.forEach(function (e) {\n                var t;\n                (t = e.classList).add.apply(t, i);\n            }), this;\n        },\n        removeClass: function removeClass() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = v(t.map(function (e) {\n                return e.split(" ");\n            }));\n            return this.forEach(function (e) {\n                var t;\n                (t = e.classList).remove.apply(t, i);\n            }), this;\n        },\n        hasClass: function hasClass() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = v(t.map(function (e) {\n                return e.split(" ");\n            }));\n            return f(this, function (e) {\n                return i.filter(function (t) {\n                    return e.classList.contains(t);\n                }).length > 0;\n            }).length > 0;\n        },\n        toggleClass: function toggleClass() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = v(t.map(function (e) {\n                return e.split(" ");\n            }));\n            this.forEach(function (e) {\n                i.forEach(function (t) {\n                    e.classList.toggle(t);\n                });\n            });\n        },\n        attr: function attr(e, t) {\n            if (1 === arguments.length && "string" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;\n            for (var a = 0; a < this.length; a += 1) {\n                if (2 === arguments.length) this[a].setAttribute(e, t);else for (var i in e) {\n                    this[a][i] = e[i], this[a].setAttribute(i, e[i]);\n                }\n            }return this;\n        },\n        removeAttr: function removeAttr(e) {\n            for (var t = 0; t < this.length; t += 1) {\n                this[t].removeAttribute(e);\n            }return this;\n        },\n        transform: function transform(e) {\n            for (var t = 0; t < this.length; t += 1) {\n                this[t].style.transform = e;\n            }return this;\n        },\n        transition: function transition(e) {\n            for (var t = 0; t < this.length; t += 1) {\n                this[t].style.transitionDuration = "string" != typeof e ? e + "ms" : e;\n            }return this;\n        },\n        on: function on() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = t[0],\n                s = t[1],\n                r = t[2],\n                n = t[3];\n            function l(e) {\n                var t = e.target;\n                if (t) {\n                    var a = e.target.dom7EventData || [];\n                    if (a.indexOf(e) < 0 && a.unshift(e), m(t).is(s)) r.apply(t, a);else for (var i = m(t).parents(), n = 0; n < i.length; n += 1) {\n                        m(i[n]).is(s) && r.apply(i[n], a);\n                    }\n                }\n            }\n            function o(e) {\n                var t = e && e.target && e.target.dom7EventData || [];\n                t.indexOf(e) < 0 && t.unshift(e), r.apply(this, t);\n            }\n            "function" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1);\n            for (var d, p = i.split(" "), u = 0; u < this.length; u += 1) {\n                var c = this[u];\n                if (s) for (d = 0; d < p.length; d += 1) {\n                    var h = p[d];\n                    c.dom7LiveListeners || (c.dom7LiveListeners = {}), c.dom7LiveListeners[h] || (c.dom7LiveListeners[h] = []), c.dom7LiveListeners[h].push({\n                        listener: r,\n                        proxyListener: l\n                    }), c.addEventListener(h, l, n);\n                } else for (d = 0; d < p.length; d += 1) {\n                    var v = p[d];\n                    c.dom7Listeners || (c.dom7Listeners = {}), c.dom7Listeners[v] || (c.dom7Listeners[v] = []), c.dom7Listeners[v].push({\n                        listener: r,\n                        proxyListener: o\n                    }), c.addEventListener(v, o, n);\n                }\n            }\n            return this;\n        },\n        off: function off() {\n            for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) {\n                t[a] = arguments[a];\n            }var i = t[0],\n                s = t[1],\n                r = t[2],\n                n = t[3];\n            "function" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1);\n            for (var l = i.split(" "), o = 0; o < l.length; o += 1) {\n                for (var d = l[o], p = 0; p < this.length; p += 1) {\n                    var u = this[p],\n                        c = void 0;\n                    if (!s && u.dom7Listeners ? c = u.dom7Listeners[d] : s && u.dom7LiveListeners && (c = u.dom7LiveListeners[d]), c && c.length) for (var h = c.length - 1; h >= 0; h -= 1) {\n                        var v = c[h];\n                        r && v.listener === r || r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (u.removeEventListener(d, v.proxyListener, n), c.splice(h, 1)) : r || (u.removeEventListener(d, v.proxyListener, n), c.splice(h, 1));\n                    }\n                }\n            }return this;\n        },\n        trigger: function trigger() {\n            for (var e = l(), t = arguments.length, a = new Array(t), i = 0; i < t; i++) {\n                a[i] = arguments[i];\n            }for (var s = a[0].split(" "), r = a[1], n = 0; n < s.length; n += 1) {\n                for (var o = s[n], d = 0; d < this.length; d += 1) {\n                    var p = this[d];\n                    if (e.CustomEvent) {\n                        var u = new e.CustomEvent(o, {\n                            detail: r,\n                            bubbles: !0,\n                            cancelable: !0\n                        });\n                        p.dom7EventData = a.filter(function (e, t) {\n                            return t > 0;\n                        }), p.dispatchEvent(u), p.dom7EventData = [], delete p.dom7EventData;\n                    }\n                }\n            }return this;\n        },\n        transitionEnd: function transitionEnd(e) {\n            var t = this;\n            return e && t.on("transitionend", function a(i) {\n                i.target === this && (e.call(this, i), t.off("transitionend", a));\n            }), this;\n        },\n        outerWidth: function outerWidth(e) {\n            if (this.length > 0) {\n                if (e) {\n                    var t = this.styles();\n                    return this[0].offsetWidth + parseFloat(t.getPropertyValue("margin-right")) + parseFloat(t.getPropertyValue("margin-left"));\n                }\n                return this[0].offsetWidth;\n            }\n            return null;\n        },\n        outerHeight: function outerHeight(e) {\n            if (this.length > 0) {\n                if (e) {\n                    var t = this.styles();\n                    return this[0].offsetHeight + parseFloat(t.getPropertyValue("margin-top")) + parseFloat(t.getPropertyValue("margin-bottom"));\n                }\n                return this[0].offsetHeight;\n            }\n            return null;\n        },\n        styles: function styles() {\n            var e = l();\n            return this[0] ? e.getComputedStyle(this[0], null) : {};\n        },\n        offset: function offset() {\n            if (this.length > 0) {\n                var e = l(),\n                    t = r(),\n                    a = this[0],\n                    i = a.getBoundingClientRect(),\n                    s = t.body,\n                    n = a.clientTop || s.clientTop || 0,\n                    o = a.clientLeft || s.clientLeft || 0,\n                    d = a === e ? e.scrollY : a.scrollTop,\n                    p = a === e ? e.scrollX : a.scrollLeft;\n                return {\n                    top: i.top + d - n,\n                    left: i.left + p - o\n                };\n            }\n            return null;\n        },\n        css: function css(e, t) {\n            var a,\n                i = l();\n            if (1 === arguments.length) {\n                if ("string" != typeof e) {\n                    for (a = 0; a < this.length; a += 1) {\n                        for (var s in e) {\n                            this[a].style[s] = e[s];\n                        }\n                    }return this;\n                }\n                if (this[0]) return i.getComputedStyle(this[0], null).getPropertyValue(e);\n            }\n            if (2 === arguments.length && "string" == typeof e) {\n                for (a = 0; a < this.length; a += 1) {\n                    this[a].style[e] = t;\n                }return this;\n            }\n            return this;\n        },\n        each: function each(e) {\n            return e ? (this.forEach(function (t, a) {\n                e.apply(t, [t, a]);\n            }), this) : this;\n        },\n        html: function html(e) {\n            if (void 0 === e) return this[0] ? this[0].innerHTML : null;\n            for (var t = 0; t < this.length; t += 1) {\n                this[t].innerHTML = e;\n            }return this;\n        },\n        text: function text(e) {\n            if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;\n            for (var t = 0; t < this.length; t += 1) {\n                this[t].textContent = e;\n            }return this;\n        },\n        is: function is(e) {\n            var t,\n                a,\n                i = l(),\n                s = r(),\n                n = this[0];\n            if (!n || void 0 === e) return !1;\n            if ("string" == typeof e) {\n                if (n.matches) return n.matches(e);\n                if (n.webkitMatchesSelector) return n.webkitMatchesSelector(e);\n                if (n.msMatchesSelector) return n.msMatchesSelector(e);\n                for (t = m(e), a = 0; a < t.length; a += 1) {\n                    if (t[a] === n) return !0;\n                }return !1;\n            }\n            if (e === s) return n === s;\n            if (e === i) return n === i;\n            if (e.nodeType || e instanceof h) {\n                for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1) {\n                    if (t[a] === n) return !0;\n                }return !1;\n            }\n            return !1;\n        },\n        index: function index() {\n            var e,\n                t = this[0];\n            if (t) {\n                for (e = 0; null !== (t = t.previousSibling);) {\n                    1 === t.nodeType && (e += 1);\n                }return e;\n            }\n        },\n        eq: function eq(e) {\n            if (void 0 === e) return this;\n            var t = this.length;\n            if (e > t - 1) return m([]);\n            if (e < 0) {\n                var a = t + e;\n                return m(a < 0 ? [] : [this[a]]);\n            }\n            return m([this[e]]);\n        },\n        append: function append() {\n            for (var e, t = r(), a = 0; a < arguments.length; a += 1) {\n                e = a < 0 || arguments.length <= a ? void 0 : arguments[a];\n                for (var i = 0; i < this.length; i += 1) {\n                    if ("string" == typeof e) {\n                        var s = t.createElement("div");\n                        for (s.innerHTML = e; s.firstChild;) {\n                            this[i].appendChild(s.firstChild);\n                        }\n                    } else if (e instanceof h) for (var n = 0; n < e.length; n += 1) {\n                        this[i].appendChild(e[n]);\n                    } else this[i].appendChild(e);\n                }\n            }\n            return this;\n        },\n        prepend: function prepend(e) {\n            var t,\n                a,\n                i = r();\n            for (t = 0; t < this.length; t += 1) {\n                if ("string" == typeof e) {\n                    var s = i.createElement("div");\n                    for (s.innerHTML = e, a = s.childNodes.length - 1; a >= 0; a -= 1) {\n                        this[t].insertBefore(s.childNodes[a], this[t].childNodes[0]);\n                    }\n                } else if (e instanceof h) for (a = 0; a < e.length; a += 1) {\n                    this[t].insertBefore(e[a], this[t].childNodes[0]);\n                } else this[t].insertBefore(e, this[t].childNodes[0]);\n            }return this;\n        },\n        next: function next(e) {\n            return this.length > 0 ? e ? this[0].nextElementSibling && m(this[0].nextElementSibling).is(e) ? m([this[0].nextElementSibling]) : m([]) : this[0].nextElementSibling ? m([this[0].nextElementSibling]) : m([]) : m([]);\n        },\n        nextAll: function nextAll(e) {\n            var t = [],\n                a = this[0];\n            if (!a) return m([]);\n            for (; a.nextElementSibling;) {\n                var i = a.nextElementSibling;\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i;\n            }\n            return m(t);\n        },\n        prev: function prev(e) {\n            if (this.length > 0) {\n                var t = this[0];\n                return e ? t.previousElementSibling && m(t.previousElementSibling).is(e) ? m([t.previousElementSibling]) : m([]) : t.previousElementSibling ? m([t.previousElementSibling]) : m([]);\n            }\n            return m([]);\n        },\n        prevAll: function prevAll(e) {\n            var t = [],\n                a = this[0];\n            if (!a) return m([]);\n            for (; a.previousElementSibling;) {\n                var i = a.previousElementSibling;\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i;\n            }\n            return m(t);\n        },\n        parent: function parent(e) {\n            for (var t = [], a = 0; a < this.length; a += 1) {\n                null !== this[a].parentNode && (e ? m(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode));\n            }return m(t);\n        },\n        parents: function parents(e) {\n            for (var t = [], a = 0; a < this.length; a += 1) {\n                for (var i = this[a].parentNode; i;) {\n                    e ? m(i).is(e) && t.push(i) : t.push(i), i = i.parentNode;\n                }\n            }return m(t);\n        },\n        closest: function closest(e) {\n            var t = this;\n            return void 0 === e ? m([]) : (t.is(e) || (t = t.parents(e).eq(0)), t);\n        },\n        find: function find(e) {\n            for (var t = [], a = 0; a < this.length; a += 1) {\n                for (var i = this[a].querySelectorAll(e), s = 0; s < i.length; s += 1) {\n                    t.push(i[s]);\n                }\n            }return m(t);\n        },\n        children: function children(e) {\n            for (var t = [], a = 0; a < this.length; a += 1) {\n                for (var i = this[a].children, s = 0; s < i.length; s += 1) {\n                    e && !m(i[s]).is(e) || t.push(i[s]);\n                }\n            }return m(t);\n        },\n        filter: function filter(e) {\n            return m(f(this, e));\n        },\n        remove: function remove() {\n            for (var e = 0; e < this.length; e += 1) {\n                this[e].parentNode && this[e].parentNode.removeChild(this[e]);\n            }return this;\n        }\n    };\n    function E(e, t) {\n        return void 0 === t && (t = 0), setTimeout(e, t);\n    }\n    function x() {\n        return Date.now();\n    }\n    function T(e, t) {\n        void 0 === t && (t = "x");\n        var a,\n            i,\n            s,\n            r = l(),\n            n = function (e) {\n            var t,\n                a = l();\n            return a.getComputedStyle && (t = a.getComputedStyle(e, null)), !t && e.currentStyle && (t = e.currentStyle), t || (t = e.style), t;\n        }(e);\n        return r.WebKitCSSMatrix ? ((i = n.transform || n.webkitTransform).split(",").length > 6 && (i = i.split(", ").map(function (e) {\n            return e.replace(",", ".");\n        }).join(", ")), s = new r.WebKitCSSMatrix("none" === i ? "" : i)) : a = (s = n.MozTransform || n.OTransform || n.MsTransform || n.msTransform || n.transform || n.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")).toString().split(","), "x" === t && (i = r.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = r.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0;\n    }\n    function C(e) {\n        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && null !== e && e.constructor && "Object" === Object.prototype.toString.call(e).slice(8, -1);\n    }\n    function S(e) {\n        return "undefined" != typeof window && void 0 !== window.HTMLElement ? e instanceof HTMLElement : e && (1 === e.nodeType || 11 === e.nodeType);\n    }\n    function M() {\n        for (var e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = ["__proto__", "constructor", "prototype"], a = 1; a < arguments.length; a += 1) {\n            var i = a < 0 || arguments.length <= a ? void 0 : arguments[a];\n            if (null != i && !S(i)) for (var s = Object.keys(Object(i)).filter(function (e) {\n                return t.indexOf(e) < 0;\n            }), r = 0, n = s.length; r < n; r += 1) {\n                var l = s[r],\n                    o = Object.getOwnPropertyDescriptor(i, l);\n                void 0 !== o && o.enumerable && (C(e[l]) && C(i[l]) ? i[l].__swiper__ ? e[l] = i[l] : M(e[l], i[l]) : !C(e[l]) && C(i[l]) ? (e[l] = {}, i[l].__swiper__ ? e[l] = i[l] : M(e[l], i[l])) : e[l] = i[l]);\n            }\n        }\n        return e;\n    }\n    function z(e, t) {\n        Object.keys(t).forEach(function (a) {\n            C(t[a]) && Object.keys(t[a]).forEach(function (i) {\n                "function" == typeof t[a][i] && (t[a][i] = t[a][i].bind(e));\n            }), e[a] = t[a];\n        });\n    }\n    function P(e) {\n        return void 0 === e && (e = ""), "." + e.trim().replace(/([\\.:!\\/])/g, "\\\\$1").replace(/ /g, ".");\n    }\n    function k(e, t, a, i) {\n        var s = r();\n        return a && Object.keys(i).forEach(function (a) {\n            if (!t[a] && !0 === t.auto) {\n                var r = s.createElement("div");\n                r.className = i[a], e.append(r), t[a] = r;\n            }\n        }), t;\n    }\n    function $() {\n        return g || (g = function () {\n            var e = l(),\n                t = r();\n            return {\n                touch: !!("ontouchstart" in e || e.DocumentTouch && t instanceof e.DocumentTouch),\n                pointerEvents: !!e.PointerEvent && "maxTouchPoints" in e.navigator && e.navigator.maxTouchPoints >= 0,\n                observer: "MutationObserver" in e || "WebkitMutationObserver" in e,\n                passiveListener: function () {\n                    var t = !1;\n                    try {\n                        var a = Object.defineProperty({}, "passive", {\n                            get: function get() {\n                                t = !0;\n                            }\n                        });\n                        e.addEventListener("testPassiveListener", null, a);\n                    } catch (e) {}\n                    return t;\n                }(),\n                gestures: "ongesturestart" in e\n            };\n        }()), g;\n    }\n    function L(e) {\n        return void 0 === e && (e = {}), b || (b = function (e) {\n            var t = (void 0 === e ? {} : e).userAgent,\n                a = $(),\n                i = l(),\n                s = i.navigator.platform,\n                r = t || i.navigator.userAgent,\n                n = {\n                ios: !1,\n                android: !1\n            },\n                o = i.screen.width,\n                d = i.screen.height,\n                p = r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\n                u = r.match(/(iPad).*OS\\s([\\d_]+)/),\n                c = r.match(/(iPod)(.*OS\\s([\\d_]+))?/),\n                h = !u && r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),\n                v = "Win32" === s,\n                f = "MacIntel" === s;\n            return !u && f && a.touch && ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"].indexOf(o + "x" + d) >= 0 && ((u = r.match(/(Version)\\/([\\d.]+)/)) || (u = [0, 1, "13_0_0"]), f = !1), p && !v && (n.os = "android", n.android = !0), (u || h || c) && (n.os = "ios", n.ios = !0), n;\n        }(e)), b;\n    }\n    function I() {\n        return w || (w = function () {\n            var e,\n                t = l();\n            return {\n                isEdge: !!t.navigator.userAgent.match(/Edge/g),\n                isSafari: (e = t.navigator.userAgent.toLowerCase(), e.indexOf("safari") >= 0 && e.indexOf("chrome") < 0 && e.indexOf("android") < 0),\n                isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)\n            };\n        }()), w;\n    }\n    Object.keys(y).forEach(function (e) {\n        Object.defineProperty(m.fn, e, {\n            value: y[e],\n            writable: !0\n        });\n    });\n    var O = {\n        name: "resize",\n        create: function create() {\n            var e = this;\n            M(e, {\n                resize: {\n                    observer: null,\n                    createObserver: function createObserver() {\n                        e && !e.destroyed && e.initialized && (e.resize.observer = new ResizeObserver(function (t) {\n                            var a = e.width,\n                                i = e.height,\n                                s = a,\n                                r = i;\n                            t.forEach(function (t) {\n                                var a = t.contentBoxSize,\n                                    i = t.contentRect,\n                                    n = t.target;\n                                n && n !== e.el || (s = i ? i.width : (a[0] || a).inlineSize, r = i ? i.height : (a[0] || a).blockSize);\n                            }), s === a && r === i || e.resize.resizeHandler();\n                        }), e.resize.observer.observe(e.el));\n                    },\n                    removeObserver: function removeObserver() {\n                        e.resize.observer && e.resize.observer.unobserve && e.el && (e.resize.observer.unobserve(e.el), e.resize.observer = null);\n                    },\n                    resizeHandler: function resizeHandler() {\n                        e && !e.destroyed && e.initialized && (e.emit("beforeResize"), e.emit("resize"));\n                    },\n                    orientationChangeHandler: function orientationChangeHandler() {\n                        e && !e.destroyed && e.initialized && e.emit("orientationchange");\n                    }\n                }\n            });\n        },\n        on: {\n            init: function init(e) {\n                var t = l();\n                e.params.resizeObserver && void 0 !== l().ResizeObserver ? e.resize.createObserver() : (t.addEventListener("resize", e.resize.resizeHandler), t.addEventListener("orientationchange", e.resize.orientationChangeHandler));\n            },\n            destroy: function destroy(e) {\n                var t = l();\n                e.resize.removeObserver(), t.removeEventListener("resize", e.resize.resizeHandler), t.removeEventListener("orientationchange", e.resize.orientationChangeHandler);\n            }\n        }\n    },\n        A = {\n        attach: function attach(e, t) {\n            void 0 === t && (t = {});\n            var a = l(),\n                i = this,\n                s = new (a.MutationObserver || a.WebkitMutationObserver)(function (e) {\n                if (1 !== e.length) {\n                    var t = function t() {\n                        i.emit("observerUpdate", e[0]);\n                    };\n                    a.requestAnimationFrame ? a.requestAnimationFrame(t) : a.setTimeout(t, 0);\n                } else i.emit("observerUpdate", e[0]);\n            });\n            s.observe(e, {\n                attributes: void 0 === t.attributes || t.attributes,\n                childList: void 0 === t.childList || t.childList,\n                characterData: void 0 === t.characterData || t.characterData\n            }), i.observer.observers.push(s);\n        },\n        init: function init() {\n            var e = this;\n            if (e.support.observer && e.params.observer) {\n                if (e.params.observeParents) for (var t = e.$el.parents(), a = 0; a < t.length; a += 1) {\n                    e.observer.attach(t[a]);\n                }e.observer.attach(e.$el[0], {\n                    childList: e.params.observeSlideChildren\n                }), e.observer.attach(e.$wrapperEl[0], {\n                    attributes: !1\n                });\n            }\n        },\n        destroy: function destroy() {\n            this.observer.observers.forEach(function (e) {\n                e.disconnect();\n            }), this.observer.observers = [];\n        }\n    },\n        D = {\n        name: "observer",\n        params: {\n            observer: !1,\n            observeParents: !1,\n            observeSlideChildren: !1\n        },\n        create: function create() {\n            z(this, {\n                observer: t({}, A, {\n                    observers: []\n                })\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.observer.init();\n            },\n            destroy: function destroy(e) {\n                e.observer.destroy();\n            }\n        }\n    };\n    function N(e) {\n        var t = this,\n            a = r(),\n            i = l(),\n            s = t.touchEventsData,\n            n = t.params,\n            o = t.touches;\n        if (t.enabled && (!t.animating || !n.preventInteractionOnTransition)) {\n            var d = e;\n            d.originalEvent && (d = d.originalEvent);\n            var p = m(d.target);\n            if (("wrapper" !== n.touchEventsTarget || p.closest(t.wrapperEl).length) && (s.isTouchEvent = "touchstart" === d.type, (s.isTouchEvent || !("which" in d) || 3 !== d.which) && !(!s.isTouchEvent && "button" in d && d.button > 0 || s.isTouched && s.isMoved))) {\n                !!n.noSwipingClass && "" !== n.noSwipingClass && d.target && d.target.shadowRoot && e.path && e.path[0] && (p = m(e.path[0]));\n                var u = n.noSwipingSelector ? n.noSwipingSelector : "." + n.noSwipingClass,\n                    c = !(!d.target || !d.target.shadowRoot);\n                if (n.noSwiping && (c ? function (e, t) {\n                    return void 0 === t && (t = this), function t(a) {\n                        return a && a !== r() && a !== l() ? (a.assignedSlot && (a = a.assignedSlot), a.closest(e) || t(a.getRootNode().host)) : null;\n                    }(t);\n                }(u, d.target) : p.closest(u)[0])) t.allowClick = !0;else if (!n.swipeHandler || p.closest(n.swipeHandler)[0]) {\n                    o.currentX = "touchstart" === d.type ? d.targetTouches[0].pageX : d.pageX, o.currentY = "touchstart" === d.type ? d.targetTouches[0].pageY : d.pageY;\n                    var h = o.currentX,\n                        v = o.currentY,\n                        f = n.edgeSwipeDetection || n.iOSEdgeSwipeDetection,\n                        g = n.edgeSwipeThreshold || n.iOSEdgeSwipeThreshold;\n                    if (f && (h <= g || h >= i.innerWidth - g)) {\n                        if ("prevent" !== f) return;\n                        e.preventDefault();\n                    }\n                    if (M(s, {\n                        isTouched: !0,\n                        isMoved: !1,\n                        allowTouchCallbacks: !0,\n                        isScrolling: void 0,\n                        startMoving: void 0\n                    }), o.startX = h, o.startY = v, s.touchStartTime = x(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, n.threshold > 0 && (s.allowThresholdMove = !1), "touchstart" !== d.type) {\n                        var b = !0;\n                        p.is(s.focusableElements) && (b = !1), a.activeElement && m(a.activeElement).is(s.focusableElements) && a.activeElement !== p[0] && a.activeElement.blur();\n                        var w = b && t.allowTouchMove && n.touchStartPreventDefault;\n                        !n.touchStartForcePreventDefault && !w || p[0].isContentEditable || d.preventDefault();\n                    }\n                    t.emit("touchStart", d);\n                }\n            }\n        }\n    }\n    function G(e) {\n        var t = r(),\n            a = this,\n            i = a.touchEventsData,\n            s = a.params,\n            n = a.touches,\n            l = a.rtlTranslate;\n        if (a.enabled) {\n            var o = e;\n            if (o.originalEvent && (o = o.originalEvent), i.isTouched) {\n                if (!i.isTouchEvent || "touchmove" === o.type) {\n                    var d = "touchmove" === o.type && o.targetTouches && (o.targetTouches[0] || o.changedTouches[0]),\n                        p = "touchmove" === o.type ? d.pageX : o.pageX,\n                        u = "touchmove" === o.type ? d.pageY : o.pageY;\n                    if (o.preventedByNestedSwiper) return n.startX = p, void (n.startY = u);\n                    if (!a.allowTouchMove) return a.allowClick = !1, void (i.isTouched && (M(n, {\n                        startX: p,\n                        startY: u,\n                        currentX: p,\n                        currentY: u\n                    }), i.touchStartTime = x()));\n                    if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop) if (a.isVertical()) {\n                        if (u < n.startY && a.translate <= a.maxTranslate() || u > n.startY && a.translate >= a.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1);\n                    } else if (p < n.startX && a.translate <= a.maxTranslate() || p > n.startX && a.translate >= a.minTranslate()) return;\n                    if (i.isTouchEvent && t.activeElement && o.target === t.activeElement && m(o.target).is(i.focusableElements)) return i.isMoved = !0, void (a.allowClick = !1);\n                    if (i.allowTouchCallbacks && a.emit("touchMove", o), !(o.targetTouches && o.targetTouches.length > 1)) {\n                        n.currentX = p, n.currentY = u;\n                        var c = n.currentX - n.startX,\n                            h = n.currentY - n.startY;\n                        if (!(a.params.threshold && Math.sqrt(Math.pow(c, 2) + Math.pow(h, 2)) < a.params.threshold)) {\n                            var v;\n                            if (void 0 === i.isScrolling) a.isHorizontal() && n.currentY === n.startY || a.isVertical() && n.currentX === n.startX ? i.isScrolling = !1 : c * c + h * h >= 25 && (v = 180 * Math.atan2(Math.abs(h), Math.abs(c)) / Math.PI, i.isScrolling = a.isHorizontal() ? v > s.touchAngle : 90 - v > s.touchAngle);\n                            if (i.isScrolling && a.emit("touchMoveOpposite", o), void 0 === i.startMoving && (n.currentX === n.startX && n.currentY === n.startY || (i.startMoving = !0)), i.isScrolling) i.isTouched = !1;else if (i.startMoving) {\n                                a.allowClick = !1, !s.cssMode && o.cancelable && o.preventDefault(), s.touchMoveStopPropagation && !s.nested && o.stopPropagation(), i.isMoved || (s.loop && a.loopFix(), i.startTranslate = a.getTranslate(), a.setTransition(0), a.animating && a.$wrapperEl.trigger("webkitTransitionEnd transitionend"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== a.allowSlideNext && !0 !== a.allowSlidePrev || a.setGrabCursor(!0), a.emit("sliderFirstMove", o)), a.emit("sliderMove", o), i.isMoved = !0;\n                                var f = a.isHorizontal() ? c : h;\n                                n.diff = f, f *= s.touchRatio, l && (f = -f), a.swipeDirection = f > 0 ? "prev" : "next", i.currentTranslate = f + i.startTranslate;\n                                var g = !0,\n                                    b = s.resistanceRatio;\n                                if (s.touchReleaseOnEdges && (b = 0), f > 0 && i.currentTranslate > a.minTranslate() ? (g = !1, s.resistance && (i.currentTranslate = a.minTranslate() - 1 + Math.pow(-a.minTranslate() + i.startTranslate + f, b))) : f < 0 && i.currentTranslate < a.maxTranslate() && (g = !1, s.resistance && (i.currentTranslate = a.maxTranslate() + 1 - Math.pow(a.maxTranslate() - i.startTranslate - f, b))), g && (o.preventedByNestedSwiper = !0), !a.allowSlideNext && "next" === a.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !a.allowSlidePrev && "prev" === a.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), a.allowSlidePrev || a.allowSlideNext || (i.currentTranslate = i.startTranslate), s.threshold > 0) {\n                                    if (!(Math.abs(f) > s.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate);\n                                    if (!i.allowThresholdMove) return i.allowThresholdMove = !0, n.startX = n.currentX, n.startY = n.currentY, i.currentTranslate = i.startTranslate, void (n.diff = a.isHorizontal() ? n.currentX - n.startX : n.currentY - n.startY);\n                                }\n                                s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (a.updateActiveIndex(), a.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({\n                                    position: n[a.isHorizontal() ? "startX" : "startY"],\n                                    time: i.touchStartTime\n                                }), i.velocities.push({\n                                    position: n[a.isHorizontal() ? "currentX" : "currentY"],\n                                    time: x()\n                                })), a.updateProgress(i.currentTranslate), a.setTranslate(i.currentTranslate));\n                            }\n                        }\n                    }\n                }\n            } else i.startMoving && i.isScrolling && a.emit("touchMoveOpposite", o);\n        }\n    }\n    function B(e) {\n        var t = this,\n            a = t.touchEventsData,\n            i = t.params,\n            s = t.touches,\n            r = t.rtlTranslate,\n            n = t.$wrapperEl,\n            l = t.slidesGrid,\n            o = t.snapGrid;\n        if (t.enabled) {\n            var d = e;\n            if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit("touchEnd", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void (a.startMoving = !1);\n            i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);\n            var p,\n                u = x(),\n                c = u - a.touchStartTime;\n            if (t.allowClick && (t.updateClickedSlide(d), t.emit("tap click", d), c < 300 && u - a.lastClickTime < 300 && t.emit("doubleTap doubleClick", d)), a.lastClickTime = x(), E(function () {\n                t.destroyed || (t.allowClick = !0);\n            }), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void (a.startMoving = !1);\n            if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, !i.cssMode) if (i.freeMode) {\n                if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex);\n                if (p > -t.maxTranslate()) return void (t.slides.length < o.length ? t.slideTo(o.length - 1) : t.slideTo(t.slides.length - 1));\n                if (i.freeModeMomentum) {\n                    if (a.velocities.length > 1) {\n                        var h = a.velocities.pop(),\n                            v = a.velocities.pop(),\n                            f = h.position - v.position,\n                            m = h.time - v.time;\n                        t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (m > 150 || x() - h.time > 300) && (t.velocity = 0);\n                    } else t.velocity = 0;\n                    t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0;\n                    var g = 1e3 * i.freeModeMomentumRatio,\n                        b = t.velocity * g,\n                        w = t.translate + b;\n                    r && (w = -w);\n                    var y,\n                        T,\n                        C = !1,\n                        S = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio;\n                    if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -S && (w = t.maxTranslate() - S), y = t.maxTranslate(), C = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (T = !0);else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > S && (w = t.minTranslate() + S), y = t.minTranslate(), C = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (T = !0);else if (i.freeModeSticky) {\n                        for (var M, z = 0; z < o.length; z += 1) {\n                            if (o[z] > -w) {\n                                M = z;\n                                break;\n                            }\n                        }w = -(w = Math.abs(o[M] - w) < Math.abs(o[M - 1] - w) || "next" === t.swipeDirection ? o[M] : o[M - 1]);\n                    }\n                    if (T && t.once("transitionEnd", function () {\n                        t.loopFix();\n                    }), 0 !== t.velocity) {\n                        if (g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity), i.freeModeSticky) {\n                            var P = Math.abs((r ? -w : w) - t.translate),\n                                k = t.slidesSizesGrid[t.activeIndex];\n                            g = P < k ? i.speed : P < 2 * k ? 1.5 * i.speed : 2.5 * i.speed;\n                        }\n                    } else if (i.freeModeSticky) return void t.slideToClosest();\n                    i.freeModeMomentumBounce && C ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd(function () {\n                        t && !t.destroyed && a.allowMomentumBounce && (t.emit("momentumBounce"), t.setTransition(i.speed), setTimeout(function () {\n                            t.setTranslate(y), n.transitionEnd(function () {\n                                t && !t.destroyed && t.transitionEnd();\n                            });\n                        }, 0));\n                    })) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd(function () {\n                        t && !t.destroyed && t.transitionEnd();\n                    }))) : (t.emit("_freeModeNoMomentumRelease"), t.updateProgress(w)), t.updateActiveIndex(), t.updateSlidesClasses();\n                } else {\n                    if (i.freeModeSticky) return void t.slideToClosest();\n                    i.freeMode && t.emit("_freeModeNoMomentumRelease");\n                }\n                (!i.freeModeMomentum || c >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());\n            } else {\n                for (var $ = 0, L = t.slidesSizesGrid[0], I = 0; I < l.length; I += I < i.slidesPerGroupSkip ? 1 : i.slidesPerGroup) {\n                    var O = I < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup;\n                    void 0 !== l[I + O] ? p >= l[I] && p < l[I + O] && ($ = I, L = l[I + O] - l[I]) : p >= l[I] && ($ = I, L = l[l.length - 1] - l[l.length - 2]);\n                }\n                var A = (p - l[$]) / L,\n                    D = $ < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup;\n                if (c > i.longSwipesMs) {\n                    if (!i.longSwipes) return void t.slideTo(t.activeIndex);\n                    "next" === t.swipeDirection && (A >= i.longSwipesRatio ? t.slideTo($ + D) : t.slideTo($)), "prev" === t.swipeDirection && (A > 1 - i.longSwipesRatio ? t.slideTo($ + D) : t.slideTo($));\n                } else {\n                    if (!i.shortSwipes) return void t.slideTo(t.activeIndex);\n                    t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo($ + D) : t.slideTo($) : ("next" === t.swipeDirection && t.slideTo($ + D), "prev" === t.swipeDirection && t.slideTo($));\n                }\n            }\n        }\n    }\n    function H() {\n        var e = this,\n            t = e.params,\n            a = e.el;\n        if (!a || 0 !== a.offsetWidth) {\n            t.breakpoints && e.setBreakpoint();\n            var i = e.allowSlideNext,\n                s = e.allowSlidePrev,\n                r = e.snapGrid;\n            e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses(), ("auto" === t.slidesPerView || t.slidesPerView > 1) && e.isEnd && !e.isBeginning && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.run(), e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow();\n        }\n    }\n    function R(e) {\n        var t = this;\n        t.enabled && (t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())));\n    }\n    function X() {\n        var e = this,\n            t = e.wrapperEl,\n            a = e.rtlTranslate;\n        if (e.enabled) {\n            e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = a ? t.scrollWidth - t.offsetWidth - t.scrollLeft : -t.scrollLeft : e.translate = -t.scrollTop, -0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses();\n            var i = e.maxTranslate() - e.minTranslate();\n            (0 === i ? 0 : (e.translate - e.minTranslate()) / i) !== e.progress && e.updateProgress(a ? -e.translate : e.translate), e.emit("setTranslate", e.translate, !1);\n        }\n    }\n    var Y = !1;\n    function V() {}\n    var W = {\n        init: !0,\n        direction: "horizontal",\n        touchEventsTarget: "container",\n        initialSlide: 0,\n        speed: 300,\n        cssMode: !1,\n        updateOnWindowResize: !0,\n        resizeObserver: !1,\n        nested: !1,\n        createElements: !1,\n        enabled: !0,\n        focusableElements: "input, select, option, textarea, button, video, label",\n        width: null,\n        height: null,\n        preventInteractionOnTransition: !1,\n        userAgent: null,\n        url: null,\n        edgeSwipeDetection: !1,\n        edgeSwipeThreshold: 20,\n        freeMode: !1,\n        freeModeMomentum: !0,\n        freeModeMomentumRatio: 1,\n        freeModeMomentumBounce: !0,\n        freeModeMomentumBounceRatio: 1,\n        freeModeMomentumVelocityRatio: 1,\n        freeModeSticky: !1,\n        freeModeMinimumVelocity: .02,\n        autoHeight: !1,\n        setWrapperSize: !1,\n        virtualTranslate: !1,\n        effect: "slide",\n        breakpoints: void 0,\n        breakpointsBase: "window",\n        spaceBetween: 0,\n        slidesPerView: 1,\n        slidesPerColumn: 1,\n        slidesPerColumnFill: "column",\n        slidesPerGroup: 1,\n        slidesPerGroupSkip: 0,\n        centeredSlides: !1,\n        centeredSlidesBounds: !1,\n        slidesOffsetBefore: 0,\n        slidesOffsetAfter: 0,\n        normalizeSlideIndex: !0,\n        centerInsufficientSlides: !1,\n        watchOverflow: !1,\n        roundLengths: !1,\n        touchRatio: 1,\n        touchAngle: 45,\n        simulateTouch: !0,\n        shortSwipes: !0,\n        longSwipes: !0,\n        longSwipesRatio: .5,\n        longSwipesMs: 300,\n        followFinger: !0,\n        allowTouchMove: !0,\n        threshold: 0,\n        touchMoveStopPropagation: !1,\n        touchStartPreventDefault: !0,\n        touchStartForcePreventDefault: !1,\n        touchReleaseOnEdges: !1,\n        uniqueNavElements: !0,\n        resistance: !0,\n        resistanceRatio: .85,\n        watchSlidesProgress: !1,\n        watchSlidesVisibility: !1,\n        grabCursor: !1,\n        preventClicks: !0,\n        preventClicksPropagation: !0,\n        slideToClickedSlide: !1,\n        preloadImages: !0,\n        updateOnImagesReady: !0,\n        loop: !1,\n        loopAdditionalSlides: 0,\n        loopedSlides: null,\n        loopFillGroupWithBlank: !1,\n        loopPreventsSlide: !0,\n        allowSlidePrev: !0,\n        allowSlideNext: !0,\n        swipeHandler: null,\n        noSwiping: !0,\n        noSwipingClass: "swiper-no-swiping",\n        noSwipingSelector: null,\n        passiveListeners: !0,\n        containerModifierClass: "swiper-container-",\n        slideClass: "swiper-slide",\n        slideBlankClass: "swiper-slide-invisible-blank",\n        slideActiveClass: "swiper-slide-active",\n        slideDuplicateActiveClass: "swiper-slide-duplicate-active",\n        slideVisibleClass: "swiper-slide-visible",\n        slideDuplicateClass: "swiper-slide-duplicate",\n        slideNextClass: "swiper-slide-next",\n        slideDuplicateNextClass: "swiper-slide-duplicate-next",\n        slidePrevClass: "swiper-slide-prev",\n        slideDuplicatePrevClass: "swiper-slide-duplicate-prev",\n        wrapperClass: "swiper-wrapper",\n        runCallbacksOnInit: !0,\n        _emitClasses: !1\n    },\n        F = {\n        modular: {\n            useParams: function useParams(e) {\n                var t = this;\n                t.modules && Object.keys(t.modules).forEach(function (a) {\n                    var i = t.modules[a];\n                    i.params && M(e, i.params);\n                });\n            },\n            useModules: function useModules(e) {\n                void 0 === e && (e = {});\n                var t = this;\n                t.modules && Object.keys(t.modules).forEach(function (a) {\n                    var i = t.modules[a],\n                        s = e[a] || {};\n                    i.on && t.on && Object.keys(i.on).forEach(function (e) {\n                        t.on(e, i.on[e]);\n                    }), i.create && i.create.bind(t)(s);\n                });\n            }\n        },\n        eventsEmitter: {\n            on: function on(e, t, a) {\n                var i = this;\n                if ("function" != typeof t) return i;\n                var s = a ? "unshift" : "push";\n                return e.split(" ").forEach(function (e) {\n                    i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t);\n                }), i;\n            },\n            once: function once(e, t, a) {\n                var i = this;\n                if ("function" != typeof t) return i;\n                function s() {\n                    i.off(e, s), s.__emitterProxy && delete s.__emitterProxy;\n                    for (var a = arguments.length, r = new Array(a), n = 0; n < a; n++) {\n                        r[n] = arguments[n];\n                    }t.apply(i, r);\n                }\n                return s.__emitterProxy = t, i.on(e, s, a);\n            },\n            onAny: function onAny(e, t) {\n                var a = this;\n                if ("function" != typeof e) return a;\n                var i = t ? "unshift" : "push";\n                return a.eventsAnyListeners.indexOf(e) < 0 && a.eventsAnyListeners[i](e), a;\n            },\n            offAny: function offAny(e) {\n                var t = this;\n                if (!t.eventsAnyListeners) return t;\n                var a = t.eventsAnyListeners.indexOf(e);\n                return a >= 0 && t.eventsAnyListeners.splice(a, 1), t;\n            },\n            off: function off(e, t) {\n                var a = this;\n                return a.eventsListeners ? (e.split(" ").forEach(function (e) {\n                    void 0 === t ? a.eventsListeners[e] = [] : a.eventsListeners[e] && a.eventsListeners[e].forEach(function (i, s) {\n                        (i === t || i.__emitterProxy && i.__emitterProxy === t) && a.eventsListeners[e].splice(s, 1);\n                    });\n                }), a) : a;\n            },\n            emit: function emit() {\n                var e,\n                    t,\n                    a,\n                    i = this;\n                if (!i.eventsListeners) return i;\n                for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++) {\n                    r[n] = arguments[n];\n                }"string" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], t = r.slice(1, r.length), a = i) : (e = r[0].events, t = r[0].data, a = r[0].context || i), t.unshift(a);\n                var l = Array.isArray(e) ? e : e.split(" ");\n                return l.forEach(function (e) {\n                    i.eventsAnyListeners && i.eventsAnyListeners.length && i.eventsAnyListeners.forEach(function (i) {\n                        i.apply(a, [e].concat(t));\n                    }), i.eventsListeners && i.eventsListeners[e] && i.eventsListeners[e].forEach(function (e) {\n                        e.apply(a, t);\n                    });\n                }), i;\n            }\n        },\n        update: {\n            updateSize: function updateSize() {\n                var e,\n                    t,\n                    a = this,\n                    i = a.$el;\n                e = void 0 !== a.params.width && null !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height && null !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css("padding-left") || 0, 10) - parseInt(i.css("padding-right") || 0, 10), t = t - parseInt(i.css("padding-top") || 0, 10) - parseInt(i.css("padding-bottom") || 0, 10), Number.isNaN(e) && (e = 0), Number.isNaN(t) && (t = 0), M(a, {\n                    width: e,\n                    height: t,\n                    size: a.isHorizontal() ? e : t\n                }));\n            },\n            updateSlides: function updateSlides() {\n                var e = this;\n                function t(t) {\n                    return e.isHorizontal() ? t : {\n                        width: "height",\n                        "margin-top": "margin-left",\n                        "margin-bottom ": "margin-right",\n                        "margin-left": "margin-top",\n                        "margin-right": "margin-bottom",\n                        "padding-left": "padding-top",\n                        "padding-right": "padding-bottom",\n                        marginRight: "marginBottom"\n                    }[t];\n                }\n                function a(e, a) {\n                    return parseFloat(e.getPropertyValue(t(a)) || 0);\n                }\n                var i = e.params,\n                    s = e.$wrapperEl,\n                    r = e.size,\n                    n = e.rtlTranslate,\n                    l = e.wrongRTL,\n                    o = e.virtual && i.virtual.enabled,\n                    d = o ? e.virtual.slides.length : e.slides.length,\n                    p = s.children("." + e.params.slideClass),\n                    u = o ? e.virtual.slides.length : p.length,\n                    c = [],\n                    h = [],\n                    v = [],\n                    f = i.slidesOffsetBefore;\n                "function" == typeof f && (f = i.slidesOffsetBefore.call(e));\n                var m = i.slidesOffsetAfter;\n                "function" == typeof m && (m = i.slidesOffsetAfter.call(e));\n                var g = e.snapGrid.length,\n                    b = e.slidesGrid.length,\n                    w = i.spaceBetween,\n                    y = -f,\n                    E = 0,\n                    x = 0;\n                if (void 0 !== r) {\n                    var T, C;\n                    "string" == typeof w && w.indexOf("%") >= 0 && (w = parseFloat(w.replace("%", "")) / 100 * r), e.virtualSize = -w, n ? p.css({\n                        marginLeft: "",\n                        marginBottom: "",\n                        marginTop: ""\n                    }) : p.css({\n                        marginRight: "",\n                        marginBottom: "",\n                        marginTop: ""\n                    }), i.slidesPerColumn > 1 && (T = Math.floor(u / i.slidesPerColumn) === u / e.params.slidesPerColumn ? u : Math.ceil(u / i.slidesPerColumn) * i.slidesPerColumn, "auto" !== i.slidesPerView && "row" === i.slidesPerColumnFill && (T = Math.max(T, i.slidesPerView * i.slidesPerColumn)));\n                    for (var S, z, P, k = i.slidesPerColumn, $ = T / k, L = Math.floor(u / i.slidesPerColumn), I = 0; I < u; I += 1) {\n                        C = 0;\n                        var O = p.eq(I);\n                        if (i.slidesPerColumn > 1) {\n                            var A = void 0,\n                                D = void 0,\n                                N = void 0;\n                            if ("row" === i.slidesPerColumnFill && i.slidesPerGroup > 1) {\n                                var G = Math.floor(I / (i.slidesPerGroup * i.slidesPerColumn)),\n                                    B = I - i.slidesPerColumn * i.slidesPerGroup * G,\n                                    H = 0 === G ? i.slidesPerGroup : Math.min(Math.ceil((u - G * k * i.slidesPerGroup) / k), i.slidesPerGroup);\n                                A = (D = B - (N = Math.floor(B / H)) * H + G * i.slidesPerGroup) + N * T / k, O.css({\n                                    "-webkit-box-ordinal-group": A,\n                                    "-moz-box-ordinal-group": A,\n                                    "-ms-flex-order": A,\n                                    "-webkit-order": A,\n                                    order: A\n                                });\n                            } else "column" === i.slidesPerColumnFill ? (N = I - (D = Math.floor(I / k)) * k, (D > L || D === L && N === k - 1) && (N += 1) >= k && (N = 0, D += 1)) : D = I - (N = Math.floor(I / $)) * $;\n                            O.css(t("margin-top"), 0 !== N ? i.spaceBetween && i.spaceBetween + "px" : "");\n                        }\n                        if ("none" !== O.css("display")) {\n                            if ("auto" === i.slidesPerView) {\n                                var R = getComputedStyle(O[0]),\n                                    X = O[0].style.transform,\n                                    Y = O[0].style.webkitTransform;\n                                if (X && (O[0].style.transform = "none"), Y && (O[0].style.webkitTransform = "none"), i.roundLengths) C = e.isHorizontal() ? O.outerWidth(!0) : O.outerHeight(!0);else {\n                                    var V = a(R, "width"),\n                                        W = a(R, "padding-left"),\n                                        F = a(R, "padding-right"),\n                                        _ = a(R, "margin-left"),\n                                        q = a(R, "margin-right"),\n                                        j = R.getPropertyValue("box-sizing");\n                                    if (j && "border-box" === j) C = V + _ + q;else {\n                                        var U = O[0],\n                                            K = U.clientWidth;\n                                        C = V + W + F + _ + q + (U.offsetWidth - K);\n                                    }\n                                }\n                                X && (O[0].style.transform = X), Y && (O[0].style.webkitTransform = Y), i.roundLengths && (C = Math.floor(C));\n                            } else C = (r - (i.slidesPerView - 1) * w) / i.slidesPerView, i.roundLengths && (C = Math.floor(C)), p[I] && (p[I].style[t("width")] = C + "px");\n                            p[I] && (p[I].swiperSlideSize = C), v.push(C), i.centeredSlides ? (y = y + C / 2 + E / 2 + w, 0 === E && 0 !== I && (y = y - r / 2 - w), 0 === I && (y = y - r / 2 - w), Math.abs(y) < .001 && (y = 0), i.roundLengths && (y = Math.floor(y)), x % i.slidesPerGroup == 0 && c.push(y), h.push(y)) : (i.roundLengths && (y = Math.floor(y)), (x - Math.min(e.params.slidesPerGroupSkip, x)) % e.params.slidesPerGroup == 0 && c.push(y), h.push(y), y = y + C + w), e.virtualSize += C + w, E = C, x += 1;\n                        }\n                    }\n                    if (e.virtualSize = Math.max(e.virtualSize, r) + m, n && l && ("slide" === i.effect || "coverflow" === i.effect) && s.css({\n                        width: e.virtualSize + i.spaceBetween + "px"\n                    }), i.setWrapperSize) s.css(((z = {})[t("width")] = e.virtualSize + i.spaceBetween + "px", z));\n                    if (i.slidesPerColumn > 1) if (e.virtualSize = (C + i.spaceBetween) * T, e.virtualSize = Math.ceil(e.virtualSize / i.slidesPerColumn) - i.spaceBetween, s.css(((P = {})[t("width")] = e.virtualSize + i.spaceBetween + "px", P)), i.centeredSlides) {\n                        S = [];\n                        for (var Z = 0; Z < c.length; Z += 1) {\n                            var J = c[Z];\n                            i.roundLengths && (J = Math.floor(J)), c[Z] < e.virtualSize + c[0] && S.push(J);\n                        }\n                        c = S;\n                    }\n                    if (!i.centeredSlides) {\n                        S = [];\n                        for (var Q = 0; Q < c.length; Q += 1) {\n                            var ee = c[Q];\n                            i.roundLengths && (ee = Math.floor(ee)), c[Q] <= e.virtualSize - r && S.push(ee);\n                        }\n                        c = S, Math.floor(e.virtualSize - r) - Math.floor(c[c.length - 1]) > 1 && c.push(e.virtualSize - r);\n                    }\n                    if (0 === c.length && (c = [0]), 0 !== i.spaceBetween) {\n                        var te,\n                            ae = e.isHorizontal() && n ? "marginLeft" : t("marginRight");\n                        p.filter(function (e, t) {\n                            return !i.cssMode || t !== p.length - 1;\n                        }).css(((te = {})[ae] = w + "px", te));\n                    }\n                    if (i.centeredSlides && i.centeredSlidesBounds) {\n                        var ie = 0;\n                        v.forEach(function (e) {\n                            ie += e + (i.spaceBetween ? i.spaceBetween : 0);\n                        });\n                        var se = (ie -= i.spaceBetween) - r;\n                        c = c.map(function (e) {\n                            return e < 0 ? -f : e > se ? se + m : e;\n                        });\n                    }\n                    if (i.centerInsufficientSlides) {\n                        var re = 0;\n                        if (v.forEach(function (e) {\n                            re += e + (i.spaceBetween ? i.spaceBetween : 0);\n                        }), (re -= i.spaceBetween) < r) {\n                            var ne = (r - re) / 2;\n                            c.forEach(function (e, t) {\n                                c[t] = e - ne;\n                            }), h.forEach(function (e, t) {\n                                h[t] = e + ne;\n                            });\n                        }\n                    }\n                    M(e, {\n                        slides: p,\n                        snapGrid: c,\n                        slidesGrid: h,\n                        slidesSizesGrid: v\n                    }), u !== d && e.emit("slidesLengthChange"), c.length !== g && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), h.length !== b && e.emit("slidesGridLengthChange"), (i.watchSlidesProgress || i.watchSlidesVisibility) && e.updateSlidesOffset();\n                }\n            },\n            updateAutoHeight: function updateAutoHeight(e) {\n                var t,\n                    a = this,\n                    i = [],\n                    s = a.virtual && a.params.virtual.enabled,\n                    r = 0;\n                "number" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed);\n                var n = function n(e) {\n                    return s ? a.slides.filter(function (t) {\n                        return parseInt(t.getAttribute("data-swiper-slide-index"), 10) === e;\n                    })[0] : a.slides.eq(e)[0];\n                };\n                if ("auto" !== a.params.slidesPerView && a.params.slidesPerView > 1) {\n                    if (a.params.centeredSlides) a.visibleSlides.each(function (e) {\n                        i.push(e);\n                    });else for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) {\n                        var l = a.activeIndex + t;\n                        if (l > a.slides.length && !s) break;\n                        i.push(n(l));\n                    }\n                } else i.push(n(a.activeIndex));\n                for (t = 0; t < i.length; t += 1) {\n                    if (void 0 !== i[t]) {\n                        var o = i[t].offsetHeight;\n                        r = o > r ? o : r;\n                    }\n                }r && a.$wrapperEl.css("height", r + "px");\n            },\n            updateSlidesOffset: function updateSlidesOffset() {\n                for (var e = this.slides, t = 0; t < e.length; t += 1) {\n                    e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;\n                }\n            },\n            updateSlidesProgress: function updateSlidesProgress(e) {\n                void 0 === e && (e = this && this.translate || 0);\n                var t = this,\n                    a = t.params,\n                    i = t.slides,\n                    s = t.rtlTranslate;\n                if (0 !== i.length) {\n                    void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset();\n                    var r = -e;\n                    s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = [];\n                    for (var n = 0; n < i.length; n += 1) {\n                        var l = i[n],\n                            o = (r + (a.centeredSlides ? t.minTranslate() : 0) - l.swiperSlideOffset) / (l.swiperSlideSize + a.spaceBetween);\n                        if (a.watchSlidesVisibility || a.centeredSlides && a.autoHeight) {\n                            var d = -(r - l.swiperSlideOffset),\n                                p = d + t.slidesSizesGrid[n];\n                            (d >= 0 && d < t.size - 1 || p > 1 && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(l), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass));\n                        }\n                        l.progress = s ? -o : o;\n                    }\n                    t.visibleSlides = m(t.visibleSlides);\n                }\n            },\n            updateProgress: function updateProgress(e) {\n                var t = this;\n                if (void 0 === e) {\n                    var a = t.rtlTranslate ? -1 : 1;\n                    e = t && t.translate && t.translate * a || 0;\n                }\n                var i = t.params,\n                    s = t.maxTranslate() - t.minTranslate(),\n                    r = t.progress,\n                    n = t.isBeginning,\n                    l = t.isEnd,\n                    o = n,\n                    d = l;\n                0 === s ? (r = 0, n = !0, l = !0) : (n = (r = (e - t.minTranslate()) / s) <= 0, l = r >= 1), M(t, {\n                    progress: r,\n                    isBeginning: n,\n                    isEnd: l\n                }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && t.updateSlidesProgress(e), n && !o && t.emit("reachBeginning toEdge"), l && !d && t.emit("reachEnd toEdge"), (o && !n || d && !l) && t.emit("fromEdge"), t.emit("progress", r);\n            },\n            updateSlidesClasses: function updateSlidesClasses() {\n                var e,\n                    t = this,\n                    a = t.slides,\n                    i = t.params,\n                    s = t.$wrapperEl,\n                    r = t.activeIndex,\n                    n = t.realIndex,\n                    l = t.virtual && i.virtual.enabled;\n                a.removeClass(i.slideActiveClass + " " + i.slideNextClass + " " + i.slidePrevClass + " " + i.slideDuplicateActiveClass + " " + i.slideDuplicateNextClass + " " + i.slideDuplicatePrevClass), (e = l ? t.$wrapperEl.find("." + i.slideClass + \'[data-swiper-slide-index="\' + r + \'"]\') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + \')[data-swiper-slide-index="\' + n + \'"]\').addClass(i.slideDuplicateActiveClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + \'[data-swiper-slide-index="\' + n + \'"]\').addClass(i.slideDuplicateActiveClass));\n                var o = e.nextAll("." + i.slideClass).eq(0).addClass(i.slideNextClass);\n                i.loop && 0 === o.length && (o = a.eq(0)).addClass(i.slideNextClass);\n                var d = e.prevAll("." + i.slideClass).eq(0).addClass(i.slidePrevClass);\n                i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (o.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + \')[data-swiper-slide-index="\' + o.attr("data-swiper-slide-index") + \'"]\').addClass(i.slideDuplicateNextClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + \'[data-swiper-slide-index="\' + o.attr("data-swiper-slide-index") + \'"]\').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + \')[data-swiper-slide-index="\' + d.attr("data-swiper-slide-index") + \'"]\').addClass(i.slideDuplicatePrevClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + \'[data-swiper-slide-index="\' + d.attr("data-swiper-slide-index") + \'"]\').addClass(i.slideDuplicatePrevClass)), t.emitSlidesClasses();\n            },\n            updateActiveIndex: function updateActiveIndex(e) {\n                var t,\n                    a = this,\n                    i = a.rtlTranslate ? a.translate : -a.translate,\n                    s = a.slidesGrid,\n                    r = a.snapGrid,\n                    n = a.params,\n                    l = a.activeIndex,\n                    o = a.realIndex,\n                    d = a.snapIndex,\n                    p = e;\n                if (void 0 === p) {\n                    for (var u = 0; u < s.length; u += 1) {\n                        void 0 !== s[u + 1] ? i >= s[u] && i < s[u + 1] - (s[u + 1] - s[u]) / 2 ? p = u : i >= s[u] && i < s[u + 1] && (p = u + 1) : i >= s[u] && (p = u);\n                    }n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0);\n                }\n                if (r.indexOf(i) >= 0) t = r.indexOf(i);else {\n                    var c = Math.min(n.slidesPerGroupSkip, p);\n                    t = c + Math.floor((p - c) / n.slidesPerGroup);\n                }\n                if (t >= r.length && (t = r.length - 1), p !== l) {\n                    var h = parseInt(a.slides.eq(p).attr("data-swiper-slide-index") || p, 10);\n                    M(a, {\n                        snapIndex: t,\n                        realIndex: h,\n                        previousIndex: l,\n                        activeIndex: p\n                    }), a.emit("activeIndexChange"), a.emit("snapIndexChange"), o !== h && a.emit("realIndexChange"), (a.initialized || a.params.runCallbacksOnInit) && a.emit("slideChange");\n                } else t !== d && (a.snapIndex = t, a.emit("snapIndexChange"));\n            },\n            updateClickedSlide: function updateClickedSlide(e) {\n                var t,\n                    a = this,\n                    i = a.params,\n                    s = m(e.target).closest("." + i.slideClass)[0],\n                    r = !1;\n                if (s) for (var n = 0; n < a.slides.length; n += 1) {\n                    if (a.slides[n] === s) {\n                        r = !0, t = n;\n                        break;\n                    }\n                }if (!s || !r) return a.clickedSlide = void 0, void (a.clickedIndex = void 0);\n                a.clickedSlide = s, a.virtual && a.params.virtual.enabled ? a.clickedIndex = parseInt(m(s).attr("data-swiper-slide-index"), 10) : a.clickedIndex = t, i.slideToClickedSlide && void 0 !== a.clickedIndex && a.clickedIndex !== a.activeIndex && a.slideToClickedSlide();\n            }\n        },\n        translate: {\n            getTranslate: function getTranslate(e) {\n                void 0 === e && (e = this.isHorizontal() ? "x" : "y");\n                var t = this,\n                    a = t.params,\n                    i = t.rtlTranslate,\n                    s = t.translate,\n                    r = t.$wrapperEl;\n                if (a.virtualTranslate) return i ? -s : s;\n                if (a.cssMode) return s;\n                var n = T(r[0], e);\n                return i && (n = -n), n || 0;\n            },\n            setTranslate: function setTranslate(e, t) {\n                var a = this,\n                    i = a.rtlTranslate,\n                    s = a.params,\n                    r = a.$wrapperEl,\n                    n = a.wrapperEl,\n                    l = a.progress,\n                    o = 0,\n                    d = 0;\n                a.isHorizontal() ? o = i ? -e : e : d = e, s.roundLengths && (o = Math.floor(o), d = Math.floor(d)), s.cssMode ? n[a.isHorizontal() ? "scrollLeft" : "scrollTop"] = a.isHorizontal() ? -o : -d : s.virtualTranslate || r.transform("translate3d(" + o + "px, " + d + "px, 0px)"), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? o : d;\n                var p = a.maxTranslate() - a.minTranslate();\n                (0 === p ? 0 : (e - a.minTranslate()) / p) !== l && a.updateProgress(e), a.emit("setTranslate", a.translate, t);\n            },\n            minTranslate: function minTranslate() {\n                return -this.snapGrid[0];\n            },\n            maxTranslate: function maxTranslate() {\n                return -this.snapGrid[this.snapGrid.length - 1];\n            },\n            translateTo: function translateTo(e, t, a, i, s) {\n                void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), void 0 === i && (i = !0);\n                var r = this,\n                    n = r.params,\n                    l = r.wrapperEl;\n                if (r.animating && n.preventInteractionOnTransition) return !1;\n                var o,\n                    d = r.minTranslate(),\n                    p = r.maxTranslate();\n                if (o = i && e > d ? d : i && e < p ? p : e, r.updateProgress(o), n.cssMode) {\n                    var u,\n                        c = r.isHorizontal();\n                    if (0 === t) l[c ? "scrollLeft" : "scrollTop"] = -o;else if (l.scrollTo) l.scrollTo(((u = {})[c ? "left" : "top"] = -o, u.behavior = "smooth", u));else l[c ? "scrollLeft" : "scrollTop"] = -o;\n                    return !0;\n                }\n                return 0 === t ? (r.setTransition(0), r.setTranslate(o), a && (r.emit("beforeTransitionStart", t, s), r.emit("transitionEnd"))) : (r.setTransition(t), r.setTranslate(o), a && (r.emit("beforeTransitionStart", t, s), r.emit("transitionStart")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function (e) {\n                    r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, a && r.emit("transitionEnd"));\n                }), r.$wrapperEl[0].addEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd))), !0;\n            }\n        },\n        transition: {\n            setTransition: function setTransition(e, t) {\n                var a = this;\n                a.params.cssMode || a.$wrapperEl.transition(e), a.emit("setTransition", e, t);\n            },\n            transitionStart: function transitionStart(e, t) {\n                void 0 === e && (e = !0);\n                var a = this,\n                    i = a.activeIndex,\n                    s = a.params,\n                    r = a.previousIndex;\n                if (!s.cssMode) {\n                    s.autoHeight && a.updateAutoHeight();\n                    var n = t;\n                    if (n || (n = i > r ? "next" : i < r ? "prev" : "reset"), a.emit("transitionStart"), e && i !== r) {\n                        if ("reset" === n) return void a.emit("slideResetTransitionStart");\n                        a.emit("slideChangeTransitionStart"), "next" === n ? a.emit("slideNextTransitionStart") : a.emit("slidePrevTransitionStart");\n                    }\n                }\n            },\n            transitionEnd: function transitionEnd(e, t) {\n                void 0 === e && (e = !0);\n                var a = this,\n                    i = a.activeIndex,\n                    s = a.previousIndex,\n                    r = a.params;\n                if (a.animating = !1, !r.cssMode) {\n                    a.setTransition(0);\n                    var n = t;\n                    if (n || (n = i > s ? "next" : i < s ? "prev" : "reset"), a.emit("transitionEnd"), e && i !== s) {\n                        if ("reset" === n) return void a.emit("slideResetTransitionEnd");\n                        a.emit("slideChangeTransitionEnd"), "next" === n ? a.emit("slideNextTransitionEnd") : a.emit("slidePrevTransitionEnd");\n                    }\n                }\n            }\n        },\n        slide: {\n            slideTo: function slideTo(e, t, a, i, s) {\n                if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), "number" != typeof e && "string" != typeof e) throw new Error("The \'index\' argument cannot have type other than \'number\' or \'string\'. [" + (typeof e === "undefined" ? "undefined" : _typeof(e)) + "] given.");\n                if ("string" == typeof e) {\n                    var r = parseInt(e, 10);\n                    if (!isFinite(r)) throw new Error("The passed-in \'index\' (string) couldn\'t be converted to \'number\'. [" + e + "] given.");\n                    e = r;\n                }\n                var n = this,\n                    l = e;\n                l < 0 && (l = 0);\n                var o = n.params,\n                    d = n.snapGrid,\n                    p = n.slidesGrid,\n                    u = n.previousIndex,\n                    c = n.activeIndex,\n                    h = n.rtlTranslate,\n                    v = n.wrapperEl,\n                    f = n.enabled;\n                if (n.animating && o.preventInteractionOnTransition || !f && !i && !s) return !1;\n                var m = Math.min(n.params.slidesPerGroupSkip, l),\n                    g = m + Math.floor((l - m) / n.params.slidesPerGroup);\n                g >= d.length && (g = d.length - 1), (c || o.initialSlide || 0) === (u || 0) && a && n.emit("beforeSlideChangeStart");\n                var b,\n                    w = -d[g];\n                if (n.updateProgress(w), o.normalizeSlideIndex) for (var y = 0; y < p.length; y += 1) {\n                    var E = -Math.floor(100 * w),\n                        x = Math.floor(100 * p[y]),\n                        T = Math.floor(100 * p[y + 1]);\n                    void 0 !== p[y + 1] ? E >= x && E < T - (T - x) / 2 ? l = y : E >= x && E < T && (l = y + 1) : E >= x && (l = y);\n                }\n                if (n.initialized && l !== c) {\n                    if (!n.allowSlideNext && w < n.translate && w < n.minTranslate()) return !1;\n                    if (!n.allowSlidePrev && w > n.translate && w > n.maxTranslate() && (c || 0) !== l) return !1;\n                }\n                if (b = l > c ? "next" : l < c ? "prev" : "reset", h && -w === n.translate || !h && w === n.translate) return n.updateActiveIndex(l), o.autoHeight && n.updateAutoHeight(), n.updateSlidesClasses(), "slide" !== o.effect && n.setTranslate(w), "reset" !== b && (n.transitionStart(a, b), n.transitionEnd(a, b)), !1;\n                if (o.cssMode) {\n                    var C,\n                        S = n.isHorizontal(),\n                        M = -w;\n                    if (h && (M = v.scrollWidth - v.offsetWidth - M), 0 === t) v[S ? "scrollLeft" : "scrollTop"] = M;else if (v.scrollTo) v.scrollTo(((C = {})[S ? "left" : "top"] = M, C.behavior = "smooth", C));else v[S ? "scrollLeft" : "scrollTop"] = M;\n                    return !0;\n                }\n                return 0 === t ? (n.setTransition(0), n.setTranslate(w), n.updateActiveIndex(l), n.updateSlidesClasses(), n.emit("beforeTransitionStart", t, i), n.transitionStart(a, b), n.transitionEnd(a, b)) : (n.setTransition(t), n.setTranslate(w), n.updateActiveIndex(l), n.updateSlidesClasses(), n.emit("beforeTransitionStart", t, i), n.transitionStart(a, b), n.animating || (n.animating = !0, n.onSlideToWrapperTransitionEnd || (n.onSlideToWrapperTransitionEnd = function (e) {\n                    n && !n.destroyed && e.target === this && (n.$wrapperEl[0].removeEventListener("transitionend", n.onSlideToWrapperTransitionEnd), n.$wrapperEl[0].removeEventListener("webkitTransitionEnd", n.onSlideToWrapperTransitionEnd), n.onSlideToWrapperTransitionEnd = null, delete n.onSlideToWrapperTransitionEnd, n.transitionEnd(a, b));\n                }), n.$wrapperEl[0].addEventListener("transitionend", n.onSlideToWrapperTransitionEnd), n.$wrapperEl[0].addEventListener("webkitTransitionEnd", n.onSlideToWrapperTransitionEnd))), !0;\n            },\n            slideToLoop: function slideToLoop(e, t, a, i) {\n                void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0);\n                var s = this,\n                    r = e;\n                return s.params.loop && (r += s.loopedSlides), s.slideTo(r, t, a, i);\n            },\n            slideNext: function slideNext(e, t, a) {\n                void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n                var i = this,\n                    s = i.params,\n                    r = i.animating;\n                if (!i.enabled) return i;\n                var n = i.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup;\n                if (s.loop) {\n                    if (r && s.loopPreventsSlide) return !1;\n                    i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft;\n                }\n                return i.slideTo(i.activeIndex + n, e, t, a);\n            },\n            slidePrev: function slidePrev(e, t, a) {\n                void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n                var i = this,\n                    s = i.params,\n                    r = i.animating,\n                    n = i.snapGrid,\n                    l = i.slidesGrid,\n                    o = i.rtlTranslate;\n                if (!i.enabled) return i;\n                if (s.loop) {\n                    if (r && s.loopPreventsSlide) return !1;\n                    i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft;\n                }\n                function d(e) {\n                    return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);\n                }\n                var p,\n                    u = d(o ? i.translate : -i.translate),\n                    c = n.map(function (e) {\n                    return d(e);\n                }),\n                    h = n[c.indexOf(u) - 1];\n                return void 0 === h && s.cssMode && n.forEach(function (e) {\n                    !h && u >= e && (h = e);\n                }), void 0 !== h && (p = l.indexOf(h)) < 0 && (p = i.activeIndex - 1), i.slideTo(p, e, t, a);\n            },\n            slideReset: function slideReset(e, t, a) {\n                return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a);\n            },\n            slideToClosest: function slideToClosest(e, t, a, i) {\n                void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5);\n                var s = this,\n                    r = s.activeIndex,\n                    n = Math.min(s.params.slidesPerGroupSkip, r),\n                    l = n + Math.floor((r - n) / s.params.slidesPerGroup),\n                    o = s.rtlTranslate ? s.translate : -s.translate;\n                if (o >= s.snapGrid[l]) {\n                    var d = s.snapGrid[l];\n                    o - d > (s.snapGrid[l + 1] - d) * i && (r += s.params.slidesPerGroup);\n                } else {\n                    var p = s.snapGrid[l - 1];\n                    o - p <= (s.snapGrid[l] - p) * i && (r -= s.params.slidesPerGroup);\n                }\n                return r = Math.max(r, 0), r = Math.min(r, s.slidesGrid.length - 1), s.slideTo(r, e, t, a);\n            },\n            slideToClickedSlide: function slideToClickedSlide() {\n                var e,\n                    t = this,\n                    a = t.params,\n                    i = t.$wrapperEl,\n                    s = "auto" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView,\n                    r = t.clickedIndex;\n                if (a.loop) {\n                    if (t.animating) return;\n                    e = parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children("." + a.slideClass + \'[data-swiper-slide-index="\' + e + \'"]:not(.\' + a.slideDuplicateClass + ")").eq(0).index(), E(function () {\n                        t.slideTo(r);\n                    })) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children("." + a.slideClass + \'[data-swiper-slide-index="\' + e + \'"]:not(.\' + a.slideDuplicateClass + ")").eq(0).index(), E(function () {\n                        t.slideTo(r);\n                    })) : t.slideTo(r);\n                } else t.slideTo(r);\n            }\n        },\n        loop: {\n            loopCreate: function loopCreate() {\n                var e = this,\n                    t = r(),\n                    a = e.params,\n                    i = e.$wrapperEl;\n                i.children("." + a.slideClass + "." + a.slideDuplicateClass).remove();\n                var s = i.children("." + a.slideClass);\n                if (a.loopFillGroupWithBlank) {\n                    var n = a.slidesPerGroup - s.length % a.slidesPerGroup;\n                    if (n !== a.slidesPerGroup) {\n                        for (var l = 0; l < n; l += 1) {\n                            var o = m(t.createElement("div")).addClass(a.slideClass + " " + a.slideBlankClass);\n                            i.append(o);\n                        }\n                        s = i.children("." + a.slideClass);\n                    }\n                }\n                "auto" !== a.slidesPerView || a.loopedSlides || (a.loopedSlides = s.length), e.loopedSlides = Math.ceil(parseFloat(a.loopedSlides || a.slidesPerView, 10)), e.loopedSlides += a.loopAdditionalSlides, e.loopedSlides > s.length && (e.loopedSlides = s.length);\n                var d = [],\n                    p = [];\n                s.each(function (t, a) {\n                    var i = m(t);\n                    a < e.loopedSlides && p.push(t), a < s.length && a >= s.length - e.loopedSlides && d.push(t), i.attr("data-swiper-slide-index", a);\n                });\n                for (var u = 0; u < p.length; u += 1) {\n                    i.append(m(p[u].cloneNode(!0)).addClass(a.slideDuplicateClass));\n                }for (var c = d.length - 1; c >= 0; c -= 1) {\n                    i.prepend(m(d[c].cloneNode(!0)).addClass(a.slideDuplicateClass));\n                }\n            },\n            loopFix: function loopFix() {\n                var e = this;\n                e.emit("beforeLoopFix");\n                var t,\n                    a = e.activeIndex,\n                    i = e.slides,\n                    s = e.loopedSlides,\n                    r = e.allowSlidePrev,\n                    n = e.allowSlideNext,\n                    l = e.snapGrid,\n                    o = e.rtlTranslate;\n                e.allowSlidePrev = !0, e.allowSlideNext = !0;\n                var d = -l[a] - e.getTranslate();\n                if (a < s) t = i.length - 3 * s + a, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((o ? -e.translate : e.translate) - d);else if (a >= i.length - s) {\n                    t = -i.length + a + s, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((o ? -e.translate : e.translate) - d);\n                }\n                e.allowSlidePrev = r, e.allowSlideNext = n, e.emit("loopFix");\n            },\n            loopDestroy: function loopDestroy() {\n                var e = this,\n                    t = e.$wrapperEl,\n                    a = e.params,\n                    i = e.slides;\n                t.children("." + a.slideClass + "." + a.slideDuplicateClass + ",." + a.slideClass + "." + a.slideBlankClass).remove(), i.removeAttr("data-swiper-slide-index");\n            }\n        },\n        grabCursor: {\n            setGrabCursor: function setGrabCursor(e) {\n                var t = this;\n                if (!(t.support.touch || !t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode)) {\n                    var a = t.el;\n                    a.style.cursor = "move", a.style.cursor = e ? "-webkit-grabbing" : "-webkit-grab", a.style.cursor = e ? "-moz-grabbin" : "-moz-grab", a.style.cursor = e ? "grabbing" : "grab";\n                }\n            },\n            unsetGrabCursor: function unsetGrabCursor() {\n                var e = this;\n                e.support.touch || e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.el.style.cursor = "");\n            }\n        },\n        manipulation: {\n            appendSlide: function appendSlide(e) {\n                var t = this,\n                    a = t.$wrapperEl,\n                    i = t.params;\n                if (i.loop && t.loopDestroy(), "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) for (var s = 0; s < e.length; s += 1) {\n                    e[s] && a.append(e[s]);\n                } else a.append(e);\n                i.loop && t.loopCreate(), i.observer && t.support.observer || t.update();\n            },\n            prependSlide: function prependSlide(e) {\n                var t = this,\n                    a = t.params,\n                    i = t.$wrapperEl,\n                    s = t.activeIndex;\n                a.loop && t.loopDestroy();\n                var r = s + 1;\n                if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) {\n                    for (var n = 0; n < e.length; n += 1) {\n                        e[n] && i.prepend(e[n]);\n                    }r = s + e.length;\n                } else i.prepend(e);\n                a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), t.slideTo(r, 0, !1);\n            },\n            addSlide: function addSlide(e, t) {\n                var a = this,\n                    i = a.$wrapperEl,\n                    s = a.params,\n                    r = a.activeIndex;\n                s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children("." + s.slideClass));\n                var n = a.slides.length;\n                if (e <= 0) a.prependSlide(t);else if (e >= n) a.appendSlide(t);else {\n                    for (var l = r > e ? r + 1 : r, o = [], d = n - 1; d >= e; d -= 1) {\n                        var p = a.slides.eq(d);\n                        p.remove(), o.unshift(p);\n                    }\n                    if ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && "length" in t) {\n                        for (var u = 0; u < t.length; u += 1) {\n                            t[u] && i.append(t[u]);\n                        }l = r > e ? r + t.length : r;\n                    } else i.append(t);\n                    for (var c = 0; c < o.length; c += 1) {\n                        i.append(o[c]);\n                    }s.loop && a.loopCreate(), s.observer && a.support.observer || a.update(), s.loop ? a.slideTo(l + a.loopedSlides, 0, !1) : a.slideTo(l, 0, !1);\n                }\n            },\n            removeSlide: function removeSlide(e) {\n                var t = this,\n                    a = t.params,\n                    i = t.$wrapperEl,\n                    s = t.activeIndex;\n                a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children("." + a.slideClass));\n                var r,\n                    n = s;\n                if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) {\n                    for (var l = 0; l < e.length; l += 1) {\n                        r = e[l], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1);\n                    }n = Math.max(n, 0);\n                } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0);\n                a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1);\n            },\n            removeAllSlides: function removeAllSlides() {\n                for (var e = [], t = 0; t < this.slides.length; t += 1) {\n                    e.push(t);\n                }this.removeSlide(e);\n            }\n        },\n        events: {\n            attachEvents: function attachEvents() {\n                var e = this,\n                    t = r(),\n                    a = e.params,\n                    i = e.touchEvents,\n                    s = e.el,\n                    n = e.wrapperEl,\n                    l = e.device,\n                    o = e.support;\n                e.onTouchStart = N.bind(e), e.onTouchMove = G.bind(e), e.onTouchEnd = B.bind(e), a.cssMode && (e.onScroll = X.bind(e)), e.onClick = R.bind(e);\n                var d = !!a.nested;\n                if (!o.touch && o.pointerEvents) s.addEventListener(i.start, e.onTouchStart, !1), t.addEventListener(i.move, e.onTouchMove, d), t.addEventListener(i.end, e.onTouchEnd, !1);else {\n                    if (o.touch) {\n                        var p = !("touchstart" !== i.start || !o.passiveListener || !a.passiveListeners) && {\n                            passive: !0,\n                            capture: !1\n                        };\n                        s.addEventListener(i.start, e.onTouchStart, p), s.addEventListener(i.move, e.onTouchMove, o.passiveListener ? {\n                            passive: !1,\n                            capture: d\n                        } : d), s.addEventListener(i.end, e.onTouchEnd, p), i.cancel && s.addEventListener(i.cancel, e.onTouchEnd, p), Y || (t.addEventListener("touchstart", V), Y = !0);\n                    }\n                    (a.simulateTouch && !l.ios && !l.android || a.simulateTouch && !o.touch && l.ios) && (s.addEventListener("mousedown", e.onTouchStart, !1), t.addEventListener("mousemove", e.onTouchMove, d), t.addEventListener("mouseup", e.onTouchEnd, !1));\n                }\n                (a.preventClicks || a.preventClicksPropagation) && s.addEventListener("click", e.onClick, !0), a.cssMode && n.addEventListener("scroll", e.onScroll), a.updateOnWindowResize ? e.on(l.ios || l.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", H, !0) : e.on("observerUpdate", H, !0);\n            },\n            detachEvents: function detachEvents() {\n                var e = this,\n                    t = r(),\n                    a = e.params,\n                    i = e.touchEvents,\n                    s = e.el,\n                    n = e.wrapperEl,\n                    l = e.device,\n                    o = e.support,\n                    d = !!a.nested;\n                if (!o.touch && o.pointerEvents) s.removeEventListener(i.start, e.onTouchStart, !1), t.removeEventListener(i.move, e.onTouchMove, d), t.removeEventListener(i.end, e.onTouchEnd, !1);else {\n                    if (o.touch) {\n                        var p = !("onTouchStart" !== i.start || !o.passiveListener || !a.passiveListeners) && {\n                            passive: !0,\n                            capture: !1\n                        };\n                        s.removeEventListener(i.start, e.onTouchStart, p), s.removeEventListener(i.move, e.onTouchMove, d), s.removeEventListener(i.end, e.onTouchEnd, p), i.cancel && s.removeEventListener(i.cancel, e.onTouchEnd, p);\n                    }\n                    (a.simulateTouch && !l.ios && !l.android || a.simulateTouch && !o.touch && l.ios) && (s.removeEventListener("mousedown", e.onTouchStart, !1), t.removeEventListener("mousemove", e.onTouchMove, d), t.removeEventListener("mouseup", e.onTouchEnd, !1));\n                }\n                (a.preventClicks || a.preventClicksPropagation) && s.removeEventListener("click", e.onClick, !0), a.cssMode && n.removeEventListener("scroll", e.onScroll), e.off(l.ios || l.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", H);\n            }\n        },\n        breakpoints: {\n            setBreakpoint: function setBreakpoint() {\n                var e = this,\n                    t = e.activeIndex,\n                    a = e.initialized,\n                    i = e.loopedSlides,\n                    s = void 0 === i ? 0 : i,\n                    r = e.params,\n                    n = e.$el,\n                    l = r.breakpoints;\n                if (l && (!l || 0 !== Object.keys(l).length)) {\n                    var o = e.getBreakpoint(l, e.params.breakpointsBase, e.el);\n                    if (o && e.currentBreakpoint !== o) {\n                        var d = o in l ? l[o] : void 0;\n                        d && ["slidesPerView", "spaceBetween", "slidesPerGroup", "slidesPerGroupSkip", "slidesPerColumn"].forEach(function (e) {\n                            var t = d[e];\n                            void 0 !== t && (d[e] = "slidesPerView" !== e || "AUTO" !== t && "auto" !== t ? "slidesPerView" === e ? parseFloat(t) : parseInt(t, 10) : "auto");\n                        });\n                        var p = d || e.originalParams,\n                            u = r.slidesPerColumn > 1,\n                            c = p.slidesPerColumn > 1,\n                            h = r.enabled;\n                        u && !c ? (n.removeClass(r.containerModifierClass + "multirow " + r.containerModifierClass + "multirow-column"), e.emitContainerClasses()) : !u && c && (n.addClass(r.containerModifierClass + "multirow"), (p.slidesPerColumnFill && "column" === p.slidesPerColumnFill || !p.slidesPerColumnFill && "column" === r.slidesPerColumnFill) && n.addClass(r.containerModifierClass + "multirow-column"), e.emitContainerClasses());\n                        var v = p.direction && p.direction !== r.direction,\n                            f = r.loop && (p.slidesPerView !== r.slidesPerView || v);\n                        v && a && e.changeDirection(), M(e.params, p);\n                        var m = e.params.enabled;\n                        M(e, {\n                            allowTouchMove: e.params.allowTouchMove,\n                            allowSlideNext: e.params.allowSlideNext,\n                            allowSlidePrev: e.params.allowSlidePrev\n                        }), h && !m ? e.disable() : !h && m && e.enable(), e.currentBreakpoint = o, e.emit("_beforeBreakpoint", p), f && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - s + e.loopedSlides, 0, !1)), e.emit("breakpoint", p);\n                    }\n                }\n            },\n            getBreakpoint: function getBreakpoint(e, t, a) {\n                if (void 0 === t && (t = "window"), e && ("container" !== t || a)) {\n                    var i = !1,\n                        s = l(),\n                        r = "window" === t ? s.innerHeight : a.clientHeight,\n                        n = Object.keys(e).map(function (e) {\n                        if ("string" == typeof e && 0 === e.indexOf("@")) {\n                            var t = parseFloat(e.substr(1));\n                            return {\n                                value: r * t,\n                                point: e\n                            };\n                        }\n                        return {\n                            value: e,\n                            point: e\n                        };\n                    });\n                    n.sort(function (e, t) {\n                        return parseInt(e.value, 10) - parseInt(t.value, 10);\n                    });\n                    for (var o = 0; o < n.length; o += 1) {\n                        var d = n[o],\n                            p = d.point,\n                            u = d.value;\n                        "window" === t ? s.matchMedia("(min-width: " + u + "px)").matches && (i = p) : u <= a.clientWidth && (i = p);\n                    }\n                    return i || "max";\n                }\n            }\n        },\n        checkOverflow: {\n            checkOverflow: function checkOverflow() {\n                var e = this,\n                    t = e.params,\n                    a = e.isLocked,\n                    i = e.slides.length > 0 && t.slidesOffsetBefore + t.spaceBetween * (e.slides.length - 1) + e.slides[0].offsetWidth * e.slides.length;\n                t.slidesOffsetBefore && t.slidesOffsetAfter && i ? e.isLocked = i <= e.size : e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, a !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock"), a && a !== e.isLocked && (e.isEnd = !1, e.navigation && e.navigation.update());\n            }\n        },\n        classes: {\n            addClasses: function addClasses() {\n                var e,\n                    t,\n                    a,\n                    i = this,\n                    s = i.classNames,\n                    r = i.params,\n                    n = i.rtl,\n                    l = i.$el,\n                    o = i.device,\n                    d = i.support,\n                    p = (e = ["initialized", r.direction, {\n                    "pointer-events": d.pointerEvents && !d.touch\n                }, {\n                    "free-mode": r.freeMode\n                }, {\n                    autoheight: r.autoHeight\n                }, {\n                    rtl: n\n                }, {\n                    multirow: r.slidesPerColumn > 1\n                }, {\n                    "multirow-column": r.slidesPerColumn > 1 && "column" === r.slidesPerColumnFill\n                }, {\n                    android: o.android\n                }, {\n                    ios: o.ios\n                }, {\n                    "css-mode": r.cssMode\n                }], t = r.containerModifierClass, a = [], e.forEach(function (e) {\n                    "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? Object.keys(e).forEach(function (i) {\n                        e[i] && a.push(t + i);\n                    }) : "string" == typeof e && a.push(t + e);\n                }), a);\n                s.push.apply(s, p), l.addClass([].concat(s).join(" ")), i.emitContainerClasses();\n            },\n            removeClasses: function removeClasses() {\n                var e = this,\n                    t = e.$el,\n                    a = e.classNames;\n                t.removeClass(a.join(" ")), e.emitContainerClasses();\n            }\n        },\n        images: {\n            loadImage: function loadImage(e, t, a, i, s, r) {\n                var n,\n                    o = l();\n                function d() {\n                    r && r();\n                }\n                m(e).parent("picture")[0] || e.complete && s ? d() : t ? ((n = new o.Image()).onload = d, n.onerror = d, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : d();\n            },\n            preloadImages: function preloadImages() {\n                var e = this;\n                function t() {\n                    null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit("imagesReady")));\n                }\n                e.imagesToLoad = e.$el.find("img");\n                for (var a = 0; a < e.imagesToLoad.length; a += 1) {\n                    var i = e.imagesToLoad[a];\n                    e.loadImage(i, i.currentSrc || i.getAttribute("src"), i.srcset || i.getAttribute("srcset"), i.sizes || i.getAttribute("sizes"), !0, t);\n                }\n            }\n        }\n    },\n        _ = {},\n        q = function () {\n        function t() {\n            for (var e, a, i = arguments.length, s = new Array(i), r = 0; r < i; r++) {\n                s[r] = arguments[r];\n            }if (1 === s.length && s[0].constructor && "Object" === Object.prototype.toString.call(s[0]).slice(8, -1) ? a = s[0] : (e = s[0], a = s[1]), a || (a = {}), a = M({}, a), e && !a.el && (a.el = e), a.el && m(a.el).length > 1) {\n                var n = [];\n                return m(a.el).each(function (e) {\n                    var i = M({}, a, {\n                        el: e\n                    });\n                    n.push(new t(i));\n                }), n;\n            }\n            var l = this;\n            l.__swiper__ = !0, l.support = $(), l.device = L({\n                userAgent: a.userAgent\n            }), l.browser = I(), l.eventsListeners = {}, l.eventsAnyListeners = [], void 0 === l.modules && (l.modules = {}), Object.keys(l.modules).forEach(function (e) {\n                var t = l.modules[e];\n                if (t.params) {\n                    var i = Object.keys(t.params)[0],\n                        s = t.params[i];\n                    if ("object" != (typeof s === "undefined" ? "undefined" : _typeof(s)) || null === s) return;\n                    if (["navigation", "pagination", "scrollbar"].indexOf(i) >= 0 && !0 === a[i] && (a[i] = {\n                        auto: !0\n                    }), !(i in a) || !("enabled" in s)) return;\n                    !0 === a[i] && (a[i] = {\n                        enabled: !0\n                    }), "object" != _typeof(a[i]) || "enabled" in a[i] || (a[i].enabled = !0), a[i] || (a[i] = {\n                        enabled: !1\n                    });\n                }\n            });\n            var o,\n                d,\n                p = M({}, W);\n            return l.useParams(p), l.params = M({}, p, _, a), l.originalParams = M({}, l.params), l.passedParams = M({}, a), l.params && l.params.on && Object.keys(l.params.on).forEach(function (e) {\n                l.on(e, l.params.on[e]);\n            }), l.params && l.params.onAny && l.onAny(l.params.onAny), l.$ = m, M(l, {\n                enabled: l.params.enabled,\n                el: e,\n                classNames: [],\n                slides: m(),\n                slidesGrid: [],\n                snapGrid: [],\n                slidesSizesGrid: [],\n                isHorizontal: function isHorizontal() {\n                    return "horizontal" === l.params.direction;\n                },\n                isVertical: function isVertical() {\n                    return "vertical" === l.params.direction;\n                },\n                activeIndex: 0,\n                realIndex: 0,\n                isBeginning: !0,\n                isEnd: !1,\n                translate: 0,\n                previousTranslate: 0,\n                progress: 0,\n                velocity: 0,\n                animating: !1,\n                allowSlideNext: l.params.allowSlideNext,\n                allowSlidePrev: l.params.allowSlidePrev,\n                touchEvents: (o = ["touchstart", "touchmove", "touchend", "touchcancel"], d = ["mousedown", "mousemove", "mouseup"], l.support.pointerEvents && (d = ["pointerdown", "pointermove", "pointerup"]), l.touchEventsTouch = {\n                    start: o[0],\n                    move: o[1],\n                    end: o[2],\n                    cancel: o[3]\n                }, l.touchEventsDesktop = {\n                    start: d[0],\n                    move: d[1],\n                    end: d[2]\n                }, l.support.touch || !l.params.simulateTouch ? l.touchEventsTouch : l.touchEventsDesktop),\n                touchEventsData: {\n                    isTouched: void 0,\n                    isMoved: void 0,\n                    allowTouchCallbacks: void 0,\n                    touchStartTime: void 0,\n                    isScrolling: void 0,\n                    currentTranslate: void 0,\n                    startTranslate: void 0,\n                    allowThresholdMove: void 0,\n                    focusableElements: l.params.focusableElements,\n                    lastClickTime: x(),\n                    clickTimeout: void 0,\n                    velocities: [],\n                    allowMomentumBounce: void 0,\n                    isTouchEvent: void 0,\n                    startMoving: void 0\n                },\n                allowClick: !0,\n                allowTouchMove: l.params.allowTouchMove,\n                touches: {\n                    startX: 0,\n                    startY: 0,\n                    currentX: 0,\n                    currentY: 0,\n                    diff: 0\n                },\n                imagesToLoad: [],\n                imagesLoaded: 0\n            }), l.useModules(), l.emit("_swiper"), l.params.init && l.init(), l;\n        }\n        var a,\n            i,\n            s,\n            n = t.prototype;\n        return n.enable = function () {\n            var e = this;\n            e.enabled || (e.enabled = !0, e.params.grabCursor && e.setGrabCursor(), e.emit("enable"));\n        }, n.disable = function () {\n            var e = this;\n            e.enabled && (e.enabled = !1, e.params.grabCursor && e.unsetGrabCursor(), e.emit("disable"));\n        }, n.setProgress = function (e, t) {\n            var a = this;\n            e = Math.min(Math.max(e, 0), 1);\n            var i = a.minTranslate(),\n                s = (a.maxTranslate() - i) * e + i;\n            a.translateTo(s, void 0 === t ? 0 : t), a.updateActiveIndex(), a.updateSlidesClasses();\n        }, n.emitContainerClasses = function () {\n            var e = this;\n            if (e.params._emitClasses && e.el) {\n                var t = e.el.className.split(" ").filter(function (t) {\n                    return 0 === t.indexOf("swiper-container") || 0 === t.indexOf(e.params.containerModifierClass);\n                });\n                e.emit("_containerClasses", t.join(" "));\n            }\n        }, n.getSlideClasses = function (e) {\n            var t = this;\n            return e.className.split(" ").filter(function (e) {\n                return 0 === e.indexOf("swiper-slide") || 0 === e.indexOf(t.params.slideClass);\n            }).join(" ");\n        }, n.emitSlidesClasses = function () {\n            var e = this;\n            if (e.params._emitClasses && e.el) {\n                var t = [];\n                e.slides.each(function (a) {\n                    var i = e.getSlideClasses(a);\n                    t.push({\n                        slideEl: a,\n                        classNames: i\n                    }), e.emit("_slideClass", a, i);\n                }), e.emit("_slideClasses", t);\n            }\n        }, n.slidesPerViewDynamic = function () {\n            var e = this,\n                t = e.params,\n                a = e.slides,\n                i = e.slidesGrid,\n                s = e.size,\n                r = e.activeIndex,\n                n = 1;\n            if (t.centeredSlides) {\n                for (var l, o = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1) {\n                    a[d] && !l && (n += 1, (o += a[d].swiperSlideSize) > s && (l = !0));\n                }for (var p = r - 1; p >= 0; p -= 1) {\n                    a[p] && !l && (n += 1, (o += a[p].swiperSlideSize) > s && (l = !0));\n                }\n            } else for (var u = r + 1; u < a.length; u += 1) {\n                i[u] - i[r] < s && (n += 1);\n            }return n;\n        }, n.update = function () {\n            var e = this;\n            if (e && !e.destroyed) {\n                var t = e.snapGrid,\n                    a = e.params;\n                a.breakpoints && e.setBreakpoint(), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (i(), e.params.autoHeight && e.updateAutoHeight()) : (("auto" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || i(), a.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit("update");\n            }\n            function i() {\n                var t = e.rtlTranslate ? -1 * e.translate : e.translate,\n                    a = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());\n                e.setTranslate(a), e.updateActiveIndex(), e.updateSlidesClasses();\n            }\n        }, n.changeDirection = function (e, t) {\n            void 0 === t && (t = !0);\n            var a = this,\n                i = a.params.direction;\n            return e || (e = "horizontal" === i ? "vertical" : "horizontal"), e === i || "horizontal" !== e && "vertical" !== e || (a.$el.removeClass("" + a.params.containerModifierClass + i).addClass("" + a.params.containerModifierClass + e), a.emitContainerClasses(), a.params.direction = e, a.slides.each(function (t) {\n                "vertical" === e ? t.style.width = "" : t.style.height = "";\n            }), a.emit("changeDirection"), t && a.update()), a;\n        }, n.mount = function (e) {\n            var t = this;\n            if (t.mounted) return !0;\n            var a = m(e || t.params.el);\n            if (!(e = a[0])) return !1;\n            e.swiper = t;\n            var i = function i() {\n                return "." + (t.params.wrapperClass || "").trim().split(" ").join(".");\n            },\n                s = function () {\n                if (e && e.shadowRoot && e.shadowRoot.querySelector) {\n                    var t = m(e.shadowRoot.querySelector(i()));\n                    return t.children = function (e) {\n                        return a.children(e);\n                    }, t;\n                }\n                return a.children(i());\n            }();\n            if (0 === s.length && t.params.createElements) {\n                var n = r().createElement("div");\n                s = m(n), n.className = t.params.wrapperClass, a.append(n), a.children("." + t.params.slideClass).each(function (e) {\n                    s.append(e);\n                });\n            }\n            return M(t, {\n                $el: a,\n                el: e,\n                $wrapperEl: s,\n                wrapperEl: s[0],\n                mounted: !0,\n                rtl: "rtl" === e.dir.toLowerCase() || "rtl" === a.css("direction"),\n                rtlTranslate: "horizontal" === t.params.direction && ("rtl" === e.dir.toLowerCase() || "rtl" === a.css("direction")),\n                wrongRTL: "-webkit-box" === s.css("display")\n            }), !0;\n        }, n.init = function (e) {\n            var t = this;\n            return t.initialized || !1 === t.mount(e) || (t.emit("beforeInit"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.params.loop && t.loopCreate(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.enabled && t.setGrabCursor(), t.params.preloadImages && t.preloadImages(), t.params.loop ? t.slideTo(t.params.initialSlide + t.loopedSlides, 0, t.params.runCallbacksOnInit, !1, !0) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit, !1, !0), t.attachEvents(), t.initialized = !0, t.emit("init"), t.emit("afterInit")), t;\n        }, n.destroy = function (e, t) {\n            void 0 === e && (e = !0), void 0 === t && (t = !0);\n            var a,\n                i = this,\n                s = i.params,\n                r = i.$el,\n                n = i.$wrapperEl,\n                l = i.slides;\n            return void 0 === i.params || i.destroyed || (i.emit("beforeDestroy"), i.initialized = !1, i.detachEvents(), s.loop && i.loopDestroy(), t && (i.removeClasses(), r.removeAttr("style"), n.removeAttr("style"), l && l.length && l.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")), i.emit("destroy"), Object.keys(i.eventsListeners).forEach(function (e) {\n                i.off(e);\n            }), !1 !== e && (i.$el[0].swiper = null, a = i, Object.keys(a).forEach(function (e) {\n                try {\n                    a[e] = null;\n                } catch (e) {}\n                try {\n                    delete a[e];\n                } catch (e) {}\n            })), i.destroyed = !0), null;\n        }, t.extendDefaults = function (e) {\n            M(_, e);\n        }, t.installModule = function (e) {\n            t.prototype.modules || (t.prototype.modules = {});\n            var a = e.name || Object.keys(t.prototype.modules).length + "_" + x();\n            t.prototype.modules[a] = e;\n        }, t.use = function (e) {\n            return Array.isArray(e) ? (e.forEach(function (e) {\n                return t.installModule(e);\n            }), t) : (t.installModule(e), t);\n        }, a = t, s = [{\n            key: "extendedDefaults",\n            get: function get() {\n                return _;\n            }\n        }, {\n            key: "defaults",\n            get: function get() {\n                return W;\n            }\n        }], (i = null) && e(a.prototype, i), s && e(a, s), t;\n    }();\n    Object.keys(F).forEach(function (e) {\n        Object.keys(F[e]).forEach(function (t) {\n            q.prototype[t] = F[e][t];\n        });\n    }), q.use([O, D]);\n    var j = {\n        update: function update(e) {\n            var t = this,\n                a = t.params,\n                i = a.slidesPerView,\n                s = a.slidesPerGroup,\n                r = a.centeredSlides,\n                n = t.params.virtual,\n                l = n.addSlidesBefore,\n                o = n.addSlidesAfter,\n                d = t.virtual,\n                p = d.from,\n                u = d.to,\n                c = d.slides,\n                h = d.slidesGrid,\n                v = d.renderSlide,\n                f = d.offset;\n            t.updateActiveIndex();\n            var m,\n                g,\n                b,\n                w = t.activeIndex || 0;\n            m = t.rtlTranslate ? "right" : t.isHorizontal() ? "left" : "top", r ? (g = Math.floor(i / 2) + s + o, b = Math.floor(i / 2) + s + l) : (g = i + (s - 1) + o, b = s + l);\n            var y = Math.max((w || 0) - b, 0),\n                E = Math.min((w || 0) + g, c.length - 1),\n                x = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);\n            function T() {\n                t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();\n            }\n            if (M(t.virtual, {\n                from: y,\n                to: E,\n                offset: x,\n                slidesGrid: t.slidesGrid\n            }), p === y && u === E && !e) return t.slidesGrid !== h && x !== f && t.slides.css(m, x + "px"), void t.updateProgress();\n            if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, {\n                offset: x,\n                from: y,\n                to: E,\n                slides: function () {\n                    for (var e = [], t = y; t <= E; t += 1) {\n                        e.push(c[t]);\n                    }return e;\n                }()\n            }), void (t.params.virtual.renderExternalUpdate && T());\n            var C = [],\n                S = [];\n            if (e) t.$wrapperEl.find("." + t.params.slideClass).remove();else for (var z = p; z <= u; z += 1) {\n                (z < y || z > E) && t.$wrapperEl.find("." + t.params.slideClass + \'[data-swiper-slide-index="\' + z + \'"]\').remove();\n            }for (var P = 0; P < c.length; P += 1) {\n                P >= y && P <= E && (void 0 === u || e ? S.push(P) : (P > u && S.push(P), P < p && C.push(P)));\n            }S.forEach(function (e) {\n                t.$wrapperEl.append(v(c[e], e));\n            }), C.sort(function (e, t) {\n                return t - e;\n            }).forEach(function (e) {\n                t.$wrapperEl.prepend(v(c[e], e));\n            }), t.$wrapperEl.children(".swiper-slide").css(m, x + "px"), T();\n        },\n        renderSlide: function renderSlide(e, t) {\n            var a = this,\n                i = a.params.virtual;\n            if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t];\n            var s = i.renderSlide ? m(i.renderSlide.call(a, e, t)) : m(\'<div class="\' + a.params.slideClass + \'" data-swiper-slide-index="\' + t + \'">\' + e + "</div>");\n            return s.attr("data-swiper-slide-index") || s.attr("data-swiper-slide-index", t), i.cache && (a.virtual.cache[t] = s), s;\n        },\n        appendSlide: function appendSlide(e) {\n            var t = this;\n            if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) for (var a = 0; a < e.length; a += 1) {\n                e[a] && t.virtual.slides.push(e[a]);\n            } else t.virtual.slides.push(e);\n            t.virtual.update(!0);\n        },\n        prependSlide: function prependSlide(e) {\n            var t = this,\n                a = t.activeIndex,\n                i = a + 1,\n                s = 1;\n            if (Array.isArray(e)) {\n                for (var r = 0; r < e.length; r += 1) {\n                    e[r] && t.virtual.slides.unshift(e[r]);\n                }i = a + e.length, s = e.length;\n            } else t.virtual.slides.unshift(e);\n            if (t.params.virtual.cache) {\n                var n = t.virtual.cache,\n                    l = {};\n                Object.keys(n).forEach(function (e) {\n                    var t = n[e],\n                        a = t.attr("data-swiper-slide-index");\n                    a && t.attr("data-swiper-slide-index", parseInt(a, 10) + 1), l[parseInt(e, 10) + s] = t;\n                }), t.virtual.cache = l;\n            }\n            t.virtual.update(!0), t.slideTo(i, 0);\n        },\n        removeSlide: function removeSlide(e) {\n            var t = this;\n            if (null != e) {\n                var a = t.activeIndex;\n                if (Array.isArray(e)) for (var i = e.length - 1; i >= 0; i -= 1) {\n                    t.virtual.slides.splice(e[i], 1), t.params.virtual.cache && delete t.virtual.cache[e[i]], e[i] < a && (a -= 1), a = Math.max(a, 0);\n                } else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < a && (a -= 1), a = Math.max(a, 0);\n                t.virtual.update(!0), t.slideTo(a, 0);\n            }\n        },\n        removeAllSlides: function removeAllSlides() {\n            var e = this;\n            e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0);\n        }\n    },\n        U = {\n        name: "virtual",\n        params: {\n            virtual: {\n                enabled: !1,\n                slides: [],\n                cache: !0,\n                renderSlide: null,\n                renderExternal: null,\n                renderExternalUpdate: !0,\n                addSlidesBefore: 0,\n                addSlidesAfter: 0\n            }\n        },\n        create: function create() {\n            z(this, {\n                virtual: t({}, j, {\n                    slides: this.params.virtual.slides,\n                    cache: {}\n                })\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                if (e.params.virtual.enabled) {\n                    e.classNames.push(e.params.containerModifierClass + "virtual");\n                    var t = {\n                        watchSlidesProgress: !0\n                    };\n                    M(e.params, t), M(e.originalParams, t), e.params.initialSlide || e.virtual.update();\n                }\n            },\n            setTranslate: function setTranslate(e) {\n                e.params.virtual.enabled && e.virtual.update();\n            }\n        }\n    },\n        K = {\n        handle: function handle(e) {\n            var t = this;\n            if (t.enabled) {\n                var a = l(),\n                    i = r(),\n                    s = t.rtlTranslate,\n                    n = e;\n                n.originalEvent && (n = n.originalEvent);\n                var o = n.keyCode || n.charCode,\n                    d = t.params.keyboard.pageUpDown,\n                    p = d && 33 === o,\n                    u = d && 34 === o,\n                    c = 37 === o,\n                    h = 39 === o,\n                    v = 38 === o,\n                    f = 40 === o;\n                if (!t.allowSlideNext && (t.isHorizontal() && h || t.isVertical() && f || u)) return !1;\n                if (!t.allowSlidePrev && (t.isHorizontal() && c || t.isVertical() && v || p)) return !1;\n                if (!(n.shiftKey || n.altKey || n.ctrlKey || n.metaKey || i.activeElement && i.activeElement.nodeName && ("input" === i.activeElement.nodeName.toLowerCase() || "textarea" === i.activeElement.nodeName.toLowerCase()))) {\n                    if (t.params.keyboard.onlyInViewport && (p || u || c || h || v || f)) {\n                        var m = !1;\n                        if (t.$el.parents("." + t.params.slideClass).length > 0 && 0 === t.$el.parents("." + t.params.slideActiveClass).length) return;\n                        var g = t.$el,\n                            b = g[0].clientWidth,\n                            w = g[0].clientHeight,\n                            y = a.innerWidth,\n                            E = a.innerHeight,\n                            x = t.$el.offset();\n                        s && (x.left -= t.$el[0].scrollLeft);\n                        for (var T = [[x.left, x.top], [x.left + b, x.top], [x.left, x.top + w], [x.left + b, x.top + w]], C = 0; C < T.length; C += 1) {\n                            var S = T[C];\n                            if (S[0] >= 0 && S[0] <= y && S[1] >= 0 && S[1] <= E) {\n                                if (0 === S[0] && 0 === S[1]) continue;\n                                m = !0;\n                            }\n                        }\n                        if (!m) return;\n                    }\n                    t.isHorizontal() ? ((p || u || c || h) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), ((u || h) && !s || (p || c) && s) && t.slideNext(), ((p || c) && !s || (u || h) && s) && t.slidePrev()) : ((p || u || v || f) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), (u || f) && t.slideNext(), (p || v) && t.slidePrev()), t.emit("keyPress", o);\n                }\n            }\n        },\n        enable: function enable() {\n            var e = this,\n                t = r();\n            e.keyboard.enabled || (m(t).on("keydown", e.keyboard.handle), e.keyboard.enabled = !0);\n        },\n        disable: function disable() {\n            var e = this,\n                t = r();\n            e.keyboard.enabled && (m(t).off("keydown", e.keyboard.handle), e.keyboard.enabled = !1);\n        }\n    },\n        Z = {\n        name: "keyboard",\n        params: {\n            keyboard: {\n                enabled: !1,\n                onlyInViewport: !0,\n                pageUpDown: !0\n            }\n        },\n        create: function create() {\n            z(this, {\n                keyboard: t({\n                    enabled: !1\n                }, K)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.params.keyboard.enabled && e.keyboard.enable();\n            },\n            destroy: function destroy(e) {\n                e.keyboard.enabled && e.keyboard.disable();\n            }\n        }\n    };\n    var J = {\n        lastScrollTime: x(),\n        lastEventBeforeSnap: void 0,\n        recentWheelEvents: [],\n        event: function event() {\n            return l().navigator.userAgent.indexOf("firefox") > -1 ? "DOMMouseScroll" : function () {\n                var e = r(),\n                    t = "onwheel",\n                    a = t in e;\n                if (!a) {\n                    var i = e.createElement("div");\n                    i.setAttribute(t, "return;"), a = "function" == typeof i.onwheel;\n                }\n                return !a && e.implementation && e.implementation.hasFeature && !0 !== e.implementation.hasFeature("", "") && (a = e.implementation.hasFeature("Events.wheel", "3.0")), a;\n            }() ? "wheel" : "mousewheel";\n        },\n        normalize: function normalize(e) {\n            var t = 0,\n                a = 0,\n                i = 0,\n                s = 0;\n            return "detail" in e && (a = e.detail), "wheelDelta" in e && (a = -e.wheelDelta / 120), "wheelDeltaY" in e && (a = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, "deltaY" in e && (s = e.deltaY), "deltaX" in e && (i = e.deltaX), e.shiftKey && !i && (i = s, s = 0), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), {\n                spinX: t,\n                spinY: a,\n                pixelX: i,\n                pixelY: s\n            };\n        },\n        handleMouseEnter: function handleMouseEnter() {\n            this.enabled && (this.mouseEntered = !0);\n        },\n        handleMouseLeave: function handleMouseLeave() {\n            this.enabled && (this.mouseEntered = !1);\n        },\n        handle: function handle(e) {\n            var t = e,\n                a = this;\n            if (a.enabled) {\n                var i = a.params.mousewheel;\n                a.params.cssMode && t.preventDefault();\n                var s = a.$el;\n                if ("container" !== a.params.mousewheel.eventsTarget && (s = m(a.params.mousewheel.eventsTarget)), !a.mouseEntered && !s[0].contains(t.target) && !i.releaseOnEdges) return !0;\n                t.originalEvent && (t = t.originalEvent);\n                var r = 0,\n                    n = a.rtlTranslate ? -1 : 1,\n                    l = J.normalize(t);\n                if (i.forceToAxis) {\n                    if (a.isHorizontal()) {\n                        if (!(Math.abs(l.pixelX) > Math.abs(l.pixelY))) return !0;\n                        r = -l.pixelX * n;\n                    } else {\n                        if (!(Math.abs(l.pixelY) > Math.abs(l.pixelX))) return !0;\n                        r = -l.pixelY;\n                    }\n                } else r = Math.abs(l.pixelX) > Math.abs(l.pixelY) ? -l.pixelX * n : -l.pixelY;\n                if (0 === r) return !0;\n                i.invert && (r = -r);\n                var o = a.getTranslate() + r * i.sensitivity;\n                if (o >= a.minTranslate() && (o = a.minTranslate()), o <= a.maxTranslate() && (o = a.maxTranslate()), (!!a.params.loop || !(o === a.minTranslate() || o === a.maxTranslate())) && a.params.nested && t.stopPropagation(), a.params.freeMode) {\n                    var d = {\n                        time: x(),\n                        delta: Math.abs(r),\n                        direction: Math.sign(r)\n                    },\n                        p = a.mousewheel.lastEventBeforeSnap,\n                        u = p && d.time < p.time + 500 && d.delta <= p.delta && d.direction === p.direction;\n                    if (!u) {\n                        a.mousewheel.lastEventBeforeSnap = void 0, a.params.loop && a.loopFix();\n                        var c = a.getTranslate() + r * i.sensitivity,\n                            h = a.isBeginning,\n                            v = a.isEnd;\n                        if (c >= a.minTranslate() && (c = a.minTranslate()), c <= a.maxTranslate() && (c = a.maxTranslate()), a.setTransition(0), a.setTranslate(c), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!h && a.isBeginning || !v && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky) {\n                            clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = void 0;\n                            var f = a.mousewheel.recentWheelEvents;\n                            f.length >= 15 && f.shift();\n                            var g = f.length ? f[f.length - 1] : void 0,\n                                b = f[0];\n                            if (f.push(d), g && (d.delta > g.delta || d.direction !== g.direction)) f.splice(0);else if (f.length >= 15 && d.time - b.time < 500 && b.delta - d.delta >= 1 && d.delta <= 6) {\n                                var w = r > 0 ? .8 : .2;\n                                a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.mousewheel.timeout = E(function () {\n                                    a.slideToClosest(a.params.speed, !0, void 0, w);\n                                }, 0);\n                            }\n                            a.mousewheel.timeout || (a.mousewheel.timeout = E(function () {\n                                a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.slideToClosest(a.params.speed, !0, void 0, .5);\n                            }, 500));\n                        }\n                        if (u || a.emit("scroll", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), c === a.minTranslate() || c === a.maxTranslate()) return !0;\n                    }\n                } else {\n                    var y = {\n                        time: x(),\n                        delta: Math.abs(r),\n                        direction: Math.sign(r),\n                        raw: e\n                    },\n                        T = a.mousewheel.recentWheelEvents;\n                    T.length >= 2 && T.shift();\n                    var C = T.length ? T[T.length - 1] : void 0;\n                    if (T.push(y), C ? (y.direction !== C.direction || y.delta > C.delta || y.time > C.time + 150) && a.mousewheel.animateSlider(y) : a.mousewheel.animateSlider(y), a.mousewheel.releaseScroll(y)) return !0;\n                }\n                return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;\n            }\n        },\n        animateSlider: function animateSlider(e) {\n            var t = this,\n                a = l();\n            return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta) && !(this.params.mousewheel.thresholdTime && x() - t.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) && (e.delta >= 6 && x() - t.mousewheel.lastScrollTime < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), t.emit("scroll", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), t.emit("scroll", e.raw)), t.mousewheel.lastScrollTime = new a.Date().getTime(), !1));\n        },\n        releaseScroll: function releaseScroll(e) {\n            var t = this,\n                a = t.params.mousewheel;\n            if (e.direction < 0) {\n                if (t.isEnd && !t.params.loop && a.releaseOnEdges) return !0;\n            } else if (t.isBeginning && !t.params.loop && a.releaseOnEdges) return !0;\n            return !1;\n        },\n        enable: function enable() {\n            var e = this,\n                t = J.event();\n            if (e.params.cssMode) return e.wrapperEl.removeEventListener(t, e.mousewheel.handle), !0;\n            if (!t) return !1;\n            if (e.mousewheel.enabled) return !1;\n            var a = e.$el;\n            return "container" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.on("mouseenter", e.mousewheel.handleMouseEnter), a.on("mouseleave", e.mousewheel.handleMouseLeave), a.on(t, e.mousewheel.handle), e.mousewheel.enabled = !0, !0;\n        },\n        disable: function disable() {\n            var e = this,\n                t = J.event();\n            if (e.params.cssMode) return e.wrapperEl.addEventListener(t, e.mousewheel.handle), !0;\n            if (!t) return !1;\n            if (!e.mousewheel.enabled) return !1;\n            var a = e.$el;\n            return "container" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.off(t, e.mousewheel.handle), e.mousewheel.enabled = !1, !0;\n        }\n    },\n        Q = {\n        toggleEl: function toggleEl(e, t) {\n            e[t ? "addClass" : "removeClass"](this.params.navigation.disabledClass), e[0] && "BUTTON" === e[0].tagName && (e[0].disabled = t);\n        },\n        update: function update() {\n            var e = this,\n                t = e.params.navigation,\n                a = e.navigation.toggleEl;\n            if (!e.params.loop) {\n                var i = e.navigation,\n                    s = i.$nextEl,\n                    r = i.$prevEl;\n                r && r.length > 0 && (e.isBeginning ? a(r, !0) : a(r, !1), e.params.watchOverflow && e.enabled && r[e.isLocked ? "addClass" : "removeClass"](t.lockClass)), s && s.length > 0 && (e.isEnd ? a(s, !0) : a(s, !1), e.params.watchOverflow && e.enabled && s[e.isLocked ? "addClass" : "removeClass"](t.lockClass));\n            }\n        },\n        onPrevClick: function onPrevClick(e) {\n            var t = this;\n            e.preventDefault(), t.isBeginning && !t.params.loop || t.slidePrev();\n        },\n        onNextClick: function onNextClick(e) {\n            var t = this;\n            e.preventDefault(), t.isEnd && !t.params.loop || t.slideNext();\n        },\n        init: function init() {\n            var e,\n                t,\n                a = this,\n                i = a.params.navigation;\n            (a.params.navigation = k(a.$el, a.params.navigation, a.params.createElements, {\n                nextEl: "swiper-button-next",\n                prevEl: "swiper-button-prev"\n            }), i.nextEl || i.prevEl) && (i.nextEl && (e = m(i.nextEl), a.params.uniqueNavElements && "string" == typeof i.nextEl && e.length > 1 && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = m(i.prevEl), a.params.uniqueNavElements && "string" == typeof i.prevEl && t.length > 1 && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && e.length > 0 && e.on("click", a.navigation.onNextClick), t && t.length > 0 && t.on("click", a.navigation.onPrevClick), M(a.navigation, {\n                $nextEl: e,\n                nextEl: e && e[0],\n                $prevEl: t,\n                prevEl: t && t[0]\n            }), a.enabled || (e && e.addClass(i.lockClass), t && t.addClass(i.lockClass)));\n        },\n        destroy: function destroy() {\n            var e = this,\n                t = e.navigation,\n                a = t.$nextEl,\n                i = t.$prevEl;\n            a && a.length && (a.off("click", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off("click", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass));\n        }\n    },\n        ee = {\n        update: function update() {\n            var e = this,\n                t = e.rtl,\n                a = e.params.pagination;\n            if (a.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {\n                var i,\n                    s = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\n                    r = e.pagination.$el,\n                    n = e.params.loop ? Math.ceil((s - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\n                if (e.params.loop ? ((i = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > s - 1 - 2 * e.loopedSlides && (i -= s - 2 * e.loopedSlides), i > n - 1 && (i -= n), i < 0 && "bullets" !== e.params.paginationType && (i = n + i)) : i = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, "bullets" === a.type && e.pagination.bullets && e.pagination.bullets.length > 0) {\n                    var l,\n                        o,\n                        d,\n                        p = e.pagination.bullets;\n                    if (a.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? "outerWidth" : "outerHeight"](!0), r.css(e.isHorizontal() ? "width" : "height", e.pagination.bulletSize * (a.dynamicMainBullets + 4) + "px"), a.dynamicMainBullets > 1 && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += i - e.previousIndex, e.pagination.dynamicBulletIndex > a.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = a.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), l = i - e.pagination.dynamicBulletIndex, d = ((o = l + (Math.min(p.length, a.dynamicMainBullets) - 1)) + l) / 2), p.removeClass(a.bulletActiveClass + " " + a.bulletActiveClass + "-next " + a.bulletActiveClass + "-next-next " + a.bulletActiveClass + "-prev " + a.bulletActiveClass + "-prev-prev " + a.bulletActiveClass + "-main"), r.length > 1) p.each(function (e) {\n                        var t = m(e),\n                            s = t.index();\n                        s === i && t.addClass(a.bulletActiveClass), a.dynamicBullets && (s >= l && s <= o && t.addClass(a.bulletActiveClass + "-main"), s === l && t.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), s === o && t.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next"));\n                    });else {\n                        var u = p.eq(i),\n                            c = u.index();\n                        if (u.addClass(a.bulletActiveClass), a.dynamicBullets) {\n                            for (var h = p.eq(l), v = p.eq(o), f = l; f <= o; f += 1) {\n                                p.eq(f).addClass(a.bulletActiveClass + "-main");\n                            }if (e.params.loop) {\n                                if (c >= p.length - a.dynamicMainBullets) {\n                                    for (var g = a.dynamicMainBullets; g >= 0; g -= 1) {\n                                        p.eq(p.length - g).addClass(a.bulletActiveClass + "-main");\n                                    }p.eq(p.length - a.dynamicMainBullets - 1).addClass(a.bulletActiveClass + "-prev");\n                                } else h.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), v.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next");\n                            } else h.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), v.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next");\n                        }\n                    }\n                    if (a.dynamicBullets) {\n                        var b = Math.min(p.length, a.dynamicMainBullets + 4),\n                            w = (e.pagination.bulletSize * b - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize,\n                            y = t ? "right" : "left";\n                        p.css(e.isHorizontal() ? y : "top", w + "px");\n                    }\n                }\n                if ("fraction" === a.type && (r.find(P(a.currentClass)).text(a.formatFractionCurrent(i + 1)), r.find(P(a.totalClass)).text(a.formatFractionTotal(n))), "progressbar" === a.type) {\n                    var E;\n                    E = a.progressbarOpposite ? e.isHorizontal() ? "vertical" : "horizontal" : e.isHorizontal() ? "horizontal" : "vertical";\n                    var x = (i + 1) / n,\n                        T = 1,\n                        C = 1;\n                    "horizontal" === E ? T = x : C = x, r.find(P(a.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + T + ") scaleY(" + C + ")").transition(e.params.speed);\n                }\n                "custom" === a.type && a.renderCustom ? (r.html(a.renderCustom(e, i + 1, n)), e.emit("paginationRender", r[0])) : e.emit("paginationUpdate", r[0]), e.params.watchOverflow && e.enabled && r[e.isLocked ? "addClass" : "removeClass"](a.lockClass);\n            }\n        },\n        render: function render() {\n            var e = this,\n                t = e.params.pagination;\n            if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {\n                var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\n                    i = e.pagination.$el,\n                    s = "";\n                if ("bullets" === t.type) {\n                    var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\n                    e.params.freeMode && !e.params.loop && r > a && (r = a);\n                    for (var n = 0; n < r; n += 1) {\n                        t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += "<" + t.bulletElement + \' class="\' + t.bulletClass + \'"></\' + t.bulletElement + ">";\n                    }i.html(s), e.pagination.bullets = i.find(P(t.bulletClass));\n                }\n                "fraction" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : \'<span class="\' + t.currentClass + \'"></span> / <span class="\' + t.totalClass + \'"></span>\', i.html(s)), "progressbar" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : \'<span class="\' + t.progressbarFillClass + \'"></span>\', i.html(s)), "custom" !== t.type && e.emit("paginationRender", e.pagination.$el[0]);\n            }\n        },\n        init: function init() {\n            var e = this;\n            e.params.pagination = k(e.$el, e.params.pagination, e.params.createElements, {\n                el: "swiper-pagination"\n            });\n            var t = e.params.pagination;\n            if (t.el) {\n                var a = m(t.el);\n                0 !== a.length && (e.params.uniqueNavElements && "string" == typeof t.el && a.length > 1 && (a = e.$el.find(t.el)), "bullets" === t.type && t.clickable && a.addClass(t.clickableClass), a.addClass(t.modifierClass + t.type), "bullets" === t.type && t.dynamicBullets && (a.addClass("" + t.modifierClass + t.type + "-dynamic"), e.pagination.dynamicBulletIndex = 0, t.dynamicMainBullets < 1 && (t.dynamicMainBullets = 1)), "progressbar" === t.type && t.progressbarOpposite && a.addClass(t.progressbarOppositeClass), t.clickable && a.on("click", P(t.bulletClass), function (t) {\n                    t.preventDefault();\n                    var a = m(this).index() * e.params.slidesPerGroup;\n                    e.params.loop && (a += e.loopedSlides), e.slideTo(a);\n                }), M(e.pagination, {\n                    $el: a,\n                    el: a[0]\n                }), e.enabled || a.addClass(t.lockClass));\n            }\n        },\n        destroy: function destroy() {\n            var e = this,\n                t = e.params.pagination;\n            if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {\n                var a = e.pagination.$el;\n                a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off("click", P(t.bulletClass));\n            }\n        }\n    },\n        te = {\n        setTranslate: function setTranslate() {\n            var e = this;\n            if (e.params.scrollbar.el && e.scrollbar.el) {\n                var t = e.scrollbar,\n                    a = e.rtlTranslate,\n                    i = e.progress,\n                    s = t.dragSize,\n                    r = t.trackSize,\n                    n = t.$dragEl,\n                    l = t.$el,\n                    o = e.params.scrollbar,\n                    d = s,\n                    p = (r - s) * i;\n                a ? (p = -p) > 0 ? (d = s - p, p = 0) : -p + s > r && (d = r + p) : p < 0 ? (d = s + p, p = 0) : p + s > r && (d = r - p), e.isHorizontal() ? (n.transform("translate3d(" + p + "px, 0, 0)"), n[0].style.width = d + "px") : (n.transform("translate3d(0px, " + p + "px, 0)"), n[0].style.height = d + "px"), o.hide && (clearTimeout(e.scrollbar.timeout), l[0].style.opacity = 1, e.scrollbar.timeout = setTimeout(function () {\n                    l[0].style.opacity = 0, l.transition(400);\n                }, 1e3));\n            }\n        },\n        setTransition: function setTransition(e) {\n            var t = this;\n            t.params.scrollbar.el && t.scrollbar.el && t.scrollbar.$dragEl.transition(e);\n        },\n        updateSize: function updateSize() {\n            var e = this;\n            if (e.params.scrollbar.el && e.scrollbar.el) {\n                var t = e.scrollbar,\n                    a = t.$dragEl,\n                    i = t.$el;\n                a[0].style.width = "", a[0].style.height = "";\n                var s,\n                    r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,\n                    n = e.size / e.virtualSize,\n                    l = n * (r / e.size);\n                s = "auto" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + "px" : a[0].style.height = s + "px", i[0].style.display = n >= 1 ? "none" : "", e.params.scrollbar.hide && (i[0].style.opacity = 0), M(t, {\n                    trackSize: r,\n                    divider: n,\n                    moveDivider: l,\n                    dragSize: s\n                }), e.params.watchOverflow && e.enabled && t.$el[e.isLocked ? "addClass" : "removeClass"](e.params.scrollbar.lockClass);\n            }\n        },\n        getPointerPosition: function getPointerPosition(e) {\n            return this.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientX : e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientY : e.clientY;\n        },\n        setDragPosition: function setDragPosition(e) {\n            var t,\n                a = this,\n                i = a.scrollbar,\n                s = a.rtlTranslate,\n                r = i.$el,\n                n = i.dragSize,\n                l = i.trackSize,\n                o = i.dragStartPos;\n            t = (i.getPointerPosition(e) - r.offset()[a.isHorizontal() ? "left" : "top"] - (null !== o ? o : n / 2)) / (l - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t);\n            var d = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t;\n            a.updateProgress(d), a.setTranslate(d), a.updateActiveIndex(), a.updateSlidesClasses();\n        },\n        onDragStart: function onDragStart(e) {\n            var t = this,\n                a = t.params.scrollbar,\n                i = t.scrollbar,\n                s = t.$wrapperEl,\n                r = i.$el,\n                n = i.$dragEl;\n            t.scrollbar.isTouched = !0, t.scrollbar.dragStartPos = e.target === n[0] || e.target === n ? i.getPointerPosition(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? "left" : "top"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css("opacity", 1), t.params.cssMode && t.$wrapperEl.css("scroll-snap-type", "none"), t.emit("scrollbarDragStart", e);\n        },\n        onDragMove: function onDragMove(e) {\n            var t = this,\n                a = t.scrollbar,\n                i = t.$wrapperEl,\n                s = a.$el,\n                r = a.$dragEl;\n            t.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), i.transition(0), s.transition(0), r.transition(0), t.emit("scrollbarDragMove", e));\n        },\n        onDragEnd: function onDragEnd(e) {\n            var t = this,\n                a = t.params.scrollbar,\n                i = t.scrollbar,\n                s = t.$wrapperEl,\n                r = i.$el;\n            t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, t.params.cssMode && (t.$wrapperEl.css("scroll-snap-type", ""), s.transition("")), a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = E(function () {\n                r.css("opacity", 0), r.transition(400);\n            }, 1e3)), t.emit("scrollbarDragEnd", e), a.snapOnRelease && t.slideToClosest());\n        },\n        enableDraggable: function enableDraggable() {\n            var e = this;\n            if (e.params.scrollbar.el) {\n                var t = r(),\n                    a = e.scrollbar,\n                    i = e.touchEventsTouch,\n                    s = e.touchEventsDesktop,\n                    n = e.params,\n                    l = e.support,\n                    o = a.$el[0],\n                    d = !(!l.passiveListener || !n.passiveListeners) && {\n                    passive: !1,\n                    capture: !1\n                },\n                    p = !(!l.passiveListener || !n.passiveListeners) && {\n                    passive: !0,\n                    capture: !1\n                };\n                o && (l.touch ? (o.addEventListener(i.start, e.scrollbar.onDragStart, d), o.addEventListener(i.move, e.scrollbar.onDragMove, d), o.addEventListener(i.end, e.scrollbar.onDragEnd, p)) : (o.addEventListener(s.start, e.scrollbar.onDragStart, d), t.addEventListener(s.move, e.scrollbar.onDragMove, d), t.addEventListener(s.end, e.scrollbar.onDragEnd, p)));\n            }\n        },\n        disableDraggable: function disableDraggable() {\n            var e = this;\n            if (e.params.scrollbar.el) {\n                var t = r(),\n                    a = e.scrollbar,\n                    i = e.touchEventsTouch,\n                    s = e.touchEventsDesktop,\n                    n = e.params,\n                    l = e.support,\n                    o = a.$el[0],\n                    d = !(!l.passiveListener || !n.passiveListeners) && {\n                    passive: !1,\n                    capture: !1\n                },\n                    p = !(!l.passiveListener || !n.passiveListeners) && {\n                    passive: !0,\n                    capture: !1\n                };\n                o && (l.touch ? (o.removeEventListener(i.start, e.scrollbar.onDragStart, d), o.removeEventListener(i.move, e.scrollbar.onDragMove, d), o.removeEventListener(i.end, e.scrollbar.onDragEnd, p)) : (o.removeEventListener(s.start, e.scrollbar.onDragStart, d), t.removeEventListener(s.move, e.scrollbar.onDragMove, d), t.removeEventListener(s.end, e.scrollbar.onDragEnd, p)));\n            }\n        },\n        init: function init() {\n            var e = this,\n                t = e.scrollbar,\n                a = e.$el;\n            e.params.scrollbar = k(a, e.params.scrollbar, e.params.createElements, {\n                el: "swiper-scrollbar"\n            });\n            var i = e.params.scrollbar;\n            if (i.el) {\n                var s = m(i.el);\n                e.params.uniqueNavElements && "string" == typeof i.el && s.length > 1 && 1 === a.find(i.el).length && (s = a.find(i.el));\n                var r = s.find("." + e.params.scrollbar.dragClass);\n                0 === r.length && (r = m(\'<div class="\' + e.params.scrollbar.dragClass + \'"></div>\'), s.append(r)), M(t, {\n                    $el: s,\n                    el: s[0],\n                    $dragEl: r,\n                    dragEl: r[0]\n                }), i.draggable && t.enableDraggable(), s && s[e.enabled ? "removeClass" : "addClass"](e.params.scrollbar.lockClass);\n            }\n        },\n        destroy: function destroy() {\n            this.scrollbar.disableDraggable();\n        }\n    },\n        ae = {\n        setTransform: function setTransform(e, t) {\n            var a = this.rtl,\n                i = m(e),\n                s = a ? -1 : 1,\n                r = i.attr("data-swiper-parallax") || "0",\n                n = i.attr("data-swiper-parallax-x"),\n                l = i.attr("data-swiper-parallax-y"),\n                o = i.attr("data-swiper-parallax-scale"),\n                d = i.attr("data-swiper-parallax-opacity");\n            if (n || l ? (n = n || "0", l = l || "0") : this.isHorizontal() ? (n = r, l = "0") : (l = r, n = "0"), n = n.indexOf("%") >= 0 ? parseInt(n, 10) * t * s + "%" : n * t * s + "px", l = l.indexOf("%") >= 0 ? parseInt(l, 10) * t + "%" : l * t + "px", null != d) {\n                var p = d - (d - 1) * (1 - Math.abs(t));\n                i[0].style.opacity = p;\n            }\n            if (null == o) i.transform("translate3d(" + n + ", " + l + ", 0px)");else {\n                var u = o - (o - 1) * (1 - Math.abs(t));\n                i.transform("translate3d(" + n + ", " + l + ", 0px) scale(" + u + ")");\n            }\n        },\n        setTranslate: function setTranslate() {\n            var e = this,\n                t = e.$el,\n                a = e.slides,\n                i = e.progress,\n                s = e.snapGrid;\n            t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {\n                e.parallax.setTransform(t, i);\n            }), a.each(function (t, a) {\n                var r = t.progress;\n                e.params.slidesPerGroup > 1 && "auto" !== e.params.slidesPerView && (r += Math.ceil(a / 2) - i * (s.length - 1)), r = Math.min(Math.max(r, -1), 1), m(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {\n                    e.parallax.setTransform(t, r);\n                });\n            });\n        },\n        setTransition: function setTransition(e) {\n            void 0 === e && (e = this.params.speed);\n            this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {\n                var a = m(t),\n                    i = parseInt(a.attr("data-swiper-parallax-duration"), 10) || e;\n                0 === e && (i = 0), a.transition(i);\n            });\n        }\n    },\n        ie = {\n        getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {\n            if (e.targetTouches.length < 2) return 1;\n            var t = e.targetTouches[0].pageX,\n                a = e.targetTouches[0].pageY,\n                i = e.targetTouches[1].pageX,\n                s = e.targetTouches[1].pageY;\n            return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2));\n        },\n        onGestureStart: function onGestureStart(e) {\n            var t = this,\n                a = t.support,\n                i = t.params.zoom,\n                s = t.zoom,\n                r = s.gesture;\n            if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !a.gestures) {\n                if ("touchstart" !== e.type || "touchstart" === e.type && e.targetTouches.length < 2) return;\n                s.fakeGestureTouched = !0, r.scaleStart = ie.getDistanceBetweenTouches(e);\n            }\n            r.$slideEl && r.$slideEl.length || (r.$slideEl = m(e.target).closest("." + t.params.slideClass), 0 === r.$slideEl.length && (r.$slideEl = t.slides.eq(t.activeIndex)), r.$imageEl = r.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), r.$imageWrapEl = r.$imageEl.parent("." + i.containerClass), r.maxRatio = r.$imageWrapEl.attr("data-swiper-zoom") || i.maxRatio, 0 !== r.$imageWrapEl.length) ? (r.$imageEl && r.$imageEl.transition(0), t.zoom.isScaling = !0) : r.$imageEl = void 0;\n        },\n        onGestureChange: function onGestureChange(e) {\n            var t = this,\n                a = t.support,\n                i = t.params.zoom,\n                s = t.zoom,\n                r = s.gesture;\n            if (!a.gestures) {\n                if ("touchmove" !== e.type || "touchmove" === e.type && e.targetTouches.length < 2) return;\n                s.fakeGestureMoved = !0, r.scaleMove = ie.getDistanceBetweenTouches(e);\n            }\n            r.$imageEl && 0 !== r.$imageEl.length ? (a.gestures ? s.scale = e.scale * s.currentScale : s.scale = r.scaleMove / r.scaleStart * s.currentScale, s.scale > r.maxRatio && (s.scale = r.maxRatio - 1 + Math.pow(s.scale - r.maxRatio + 1, .5)), s.scale < i.minRatio && (s.scale = i.minRatio + 1 - Math.pow(i.minRatio - s.scale + 1, .5)), r.$imageEl.transform("translate3d(0,0,0) scale(" + s.scale + ")")) : "gesturechange" === e.type && s.onGestureStart(e);\n        },\n        onGestureEnd: function onGestureEnd(e) {\n            var t = this,\n                a = t.device,\n                i = t.support,\n                s = t.params.zoom,\n                r = t.zoom,\n                n = r.gesture;\n            if (!i.gestures) {\n                if (!r.fakeGestureTouched || !r.fakeGestureMoved) return;\n                if ("touchend" !== e.type || "touchend" === e.type && e.changedTouches.length < 2 && !a.android) return;\n                r.fakeGestureTouched = !1, r.fakeGestureMoved = !1;\n            }\n            n.$imageEl && 0 !== n.$imageEl.length && (r.scale = Math.max(Math.min(r.scale, n.maxRatio), s.minRatio), n.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale(" + r.scale + ")"), r.currentScale = r.scale, r.isScaling = !1, 1 === r.scale && (n.$slideEl = void 0));\n        },\n        onTouchStart: function onTouchStart(e) {\n            var t = this.device,\n                a = this.zoom,\n                i = a.gesture,\n                s = a.image;\n            i.$imageEl && 0 !== i.$imageEl.length && (s.isTouched || (t.android && e.cancelable && e.preventDefault(), s.isTouched = !0, s.touchesStart.x = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesStart.y = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY));\n        },\n        onTouchMove: function onTouchMove(e) {\n            var t = this,\n                a = t.zoom,\n                i = a.gesture,\n                s = a.image,\n                r = a.velocity;\n            if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) {\n                s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = T(i.$imageWrapEl[0], "x") || 0, s.startY = T(i.$imageWrapEl[0], "y") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0));\n                var n = s.width * a.scale,\n                    l = s.height * a.scale;\n                if (!(n < i.slideWidth && l < i.slideHeight)) {\n                    if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - l / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) {\n                        if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1);\n                        if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1);\n                    }\n                    e.cancelable && e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform("translate3d(" + s.currentX + "px, " + s.currentY + "px,0)");\n                }\n            }\n        },\n        onTouchEnd: function onTouchEnd() {\n            var e = this.zoom,\n                t = e.gesture,\n                a = e.image,\n                i = e.velocity;\n            if (t.$imageEl && 0 !== t.$imageEl.length) {\n                if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void (a.isMoved = !1);\n                a.isTouched = !1, a.isMoved = !1;\n                var s = 300,\n                    r = 300,\n                    n = i.x * s,\n                    l = a.currentX + n,\n                    o = i.y * r,\n                    d = a.currentY + o;\n                0 !== i.x && (s = Math.abs((l - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y));\n                var p = Math.max(s, r);\n                a.currentX = l, a.currentY = d;\n                var u = a.width * e.scale,\n                    c = a.height * e.scale;\n                a.minX = Math.min(t.slideWidth / 2 - u / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - c / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform("translate3d(" + a.currentX + "px, " + a.currentY + "px,0)");\n            }\n        },\n        onTransitionEnd: function onTransitionEnd() {\n            var e = this,\n                t = e.zoom,\n                a = t.gesture;\n            a.$slideEl && e.previousIndex !== e.activeIndex && (a.$imageEl && a.$imageEl.transform("translate3d(0,0,0) scale(1)"), a.$imageWrapEl && a.$imageWrapEl.transform("translate3d(0,0,0)"), t.scale = 1, t.currentScale = 1, a.$slideEl = void 0, a.$imageEl = void 0, a.$imageWrapEl = void 0);\n        },\n        toggle: function toggle(e) {\n            var t = this.zoom;\n            t.scale && 1 !== t.scale ? t.out() : t.in(e);\n        },\n        in: function _in(e) {\n            var t,\n                a,\n                i,\n                s,\n                r,\n                n,\n                o,\n                d,\n                p,\n                u,\n                c,\n                h,\n                v,\n                f,\n                g,\n                b,\n                w = this,\n                y = l(),\n                E = w.zoom,\n                x = w.params.zoom,\n                T = E.gesture,\n                C = E.image;\n            (T.$slideEl || (e && e.target && (T.$slideEl = m(e.target).closest("." + w.params.slideClass)), T.$slideEl || (w.params.virtual && w.params.virtual.enabled && w.virtual ? T.$slideEl = w.$wrapperEl.children("." + w.params.slideActiveClass) : T.$slideEl = w.slides.eq(w.activeIndex)), T.$imageEl = T.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), T.$imageWrapEl = T.$imageEl.parent("." + x.containerClass)), T.$imageEl && 0 !== T.$imageEl.length && T.$imageWrapEl && 0 !== T.$imageWrapEl.length) && (T.$slideEl.addClass("" + x.zoomedSlideClass), void 0 === C.touchesStart.x && e ? (t = "touchend" === e.type ? e.changedTouches[0].pageX : e.pageX, a = "touchend" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = C.touchesStart.x, a = C.touchesStart.y), E.scale = T.$imageWrapEl.attr("data-swiper-zoom") || x.maxRatio, E.currentScale = T.$imageWrapEl.attr("data-swiper-zoom") || x.maxRatio, e ? (g = T.$slideEl[0].offsetWidth, b = T.$slideEl[0].offsetHeight, i = T.$slideEl.offset().left + y.scrollX + g / 2 - t, s = T.$slideEl.offset().top + y.scrollY + b / 2 - a, o = T.$imageEl[0].offsetWidth, d = T.$imageEl[0].offsetHeight, p = o * E.scale, u = d * E.scale, v = -(c = Math.min(g / 2 - p / 2, 0)), f = -(h = Math.min(b / 2 - u / 2, 0)), (r = i * E.scale) < c && (r = c), r > v && (r = v), (n = s * E.scale) < h && (n = h), n > f && (n = f)) : (r = 0, n = 0), T.$imageWrapEl.transition(300).transform("translate3d(" + r + "px, " + n + "px,0)"), T.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + E.scale + ")"));\n        },\n        out: function out() {\n            var e = this,\n                t = e.zoom,\n                a = e.params.zoom,\n                i = t.gesture;\n            i.$slideEl || (e.params.virtual && e.params.virtual.enabled && e.virtual ? i.$slideEl = e.$wrapperEl.children("." + e.params.slideActiveClass) : i.$slideEl = e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), i.$imageWrapEl = i.$imageEl.parent("." + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && i.$imageWrapEl && 0 !== i.$imageWrapEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"), i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"), i.$slideEl.removeClass("" + a.zoomedSlideClass), i.$slideEl = void 0);\n        },\n        toggleGestures: function toggleGestures(e) {\n            var t = this,\n                a = t.zoom,\n                i = a.slideSelector,\n                s = a.passiveListener;\n            t.$wrapperEl[e]("gesturestart", i, a.onGestureStart, s), t.$wrapperEl[e]("gesturechange", i, a.onGestureChange, s), t.$wrapperEl[e]("gestureend", i, a.onGestureEnd, s);\n        },\n        enableGestures: function enableGestures() {\n            this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures("on"));\n        },\n        disableGestures: function disableGestures() {\n            this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures("off"));\n        },\n        enable: function enable() {\n            var e = this,\n                t = e.support,\n                a = e.zoom;\n            if (!a.enabled) {\n                a.enabled = !0;\n                var i = !("touchstart" !== e.touchEvents.start || !t.passiveListener || !e.params.passiveListeners) && {\n                    passive: !0,\n                    capture: !1\n                },\n                    s = !t.passiveListener || {\n                    passive: !1,\n                    capture: !0\n                },\n                    r = "." + e.params.slideClass;\n                e.zoom.passiveListener = i, e.zoom.slideSelector = r, t.gestures ? (e.$wrapperEl.on(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.on(e.touchEvents.end, e.zoom.disableGestures, i)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, r, a.onGestureStart, i), e.$wrapperEl.on(e.touchEvents.move, r, a.onGestureChange, s), e.$wrapperEl.on(e.touchEvents.end, r, a.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.on(e.touchEvents.cancel, r, a.onGestureEnd, i)), e.$wrapperEl.on(e.touchEvents.move, "." + e.params.zoom.containerClass, a.onTouchMove, s);\n            }\n        },\n        disable: function disable() {\n            var e = this,\n                t = e.zoom;\n            if (t.enabled) {\n                var a = e.support;\n                e.zoom.enabled = !1;\n                var i = !("touchstart" !== e.touchEvents.start || !a.passiveListener || !e.params.passiveListeners) && {\n                    passive: !0,\n                    capture: !1\n                },\n                    s = !a.passiveListener || {\n                    passive: !1,\n                    capture: !0\n                },\n                    r = "." + e.params.slideClass;\n                a.gestures ? (e.$wrapperEl.off(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.off(e.touchEvents.end, e.zoom.disableGestures, i)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, r, t.onGestureStart, i), e.$wrapperEl.off(e.touchEvents.move, r, t.onGestureChange, s), e.$wrapperEl.off(e.touchEvents.end, r, t.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.off(e.touchEvents.cancel, r, t.onGestureEnd, i)), e.$wrapperEl.off(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove, s);\n            }\n        }\n    },\n        se = {\n        loadInSlide: function loadInSlide(e, t) {\n            void 0 === t && (t = !0);\n            var a = this,\n                i = a.params.lazy;\n            if (void 0 !== e && 0 !== a.slides.length) {\n                var s = a.virtual && a.params.virtual.enabled ? a.$wrapperEl.children("." + a.params.slideClass + \'[data-swiper-slide-index="\' + e + \'"]\') : a.slides.eq(e),\n                    r = s.find("." + i.elementClass + ":not(." + i.loadedClass + "):not(." + i.loadingClass + ")");\n                !s.hasClass(i.elementClass) || s.hasClass(i.loadedClass) || s.hasClass(i.loadingClass) || r.push(s[0]), 0 !== r.length && r.each(function (e) {\n                    var r = m(e);\n                    r.addClass(i.loadingClass);\n                    var n = r.attr("data-background"),\n                        l = r.attr("data-src"),\n                        o = r.attr("data-srcset"),\n                        d = r.attr("data-sizes"),\n                        p = r.parent("picture");\n                    a.loadImage(r[0], l || n, o, d, !1, function () {\n                        if (null != a && a && (!a || a.params) && !a.destroyed) {\n                            if (n ? (r.css("background-image", \'url("\' + n + \'")\'), r.removeAttr("data-background")) : (o && (r.attr("srcset", o), r.removeAttr("data-srcset")), d && (r.attr("sizes", d), r.removeAttr("data-sizes")), p.length && p.children("source").each(function (e) {\n                                var t = m(e);\n                                t.attr("data-srcset") && (t.attr("srcset", t.attr("data-srcset")), t.removeAttr("data-srcset"));\n                            }), l && (r.attr("src", l), r.removeAttr("data-src"))), r.addClass(i.loadedClass).removeClass(i.loadingClass), s.find("." + i.preloaderClass).remove(), a.params.loop && t) {\n                                var e = s.attr("data-swiper-slide-index");\n                                if (s.hasClass(a.params.slideDuplicateClass)) {\n                                    var u = a.$wrapperEl.children(\'[data-swiper-slide-index="\' + e + \'"]:not(.\' + a.params.slideDuplicateClass + ")");\n                                    a.lazy.loadInSlide(u.index(), !1);\n                                } else {\n                                    var c = a.$wrapperEl.children("." + a.params.slideDuplicateClass + \'[data-swiper-slide-index="\' + e + \'"]\');\n                                    a.lazy.loadInSlide(c.index(), !1);\n                                }\n                            }\n                            a.emit("lazyImageReady", s[0], r[0]), a.params.autoHeight && a.updateAutoHeight();\n                        }\n                    }), a.emit("lazyImageLoad", s[0], r[0]);\n                });\n            }\n        },\n        load: function load() {\n            var e = this,\n                t = e.$wrapperEl,\n                a = e.params,\n                i = e.slides,\n                s = e.activeIndex,\n                r = e.virtual && a.virtual.enabled,\n                n = a.lazy,\n                l = a.slidesPerView;\n            function o(e) {\n                if (r) {\n                    if (t.children("." + a.slideClass + \'[data-swiper-slide-index="\' + e + \'"]\').length) return !0;\n                } else if (i[e]) return !0;\n                return !1;\n            }\n            function d(e) {\n                return r ? m(e).attr("data-swiper-slide-index") : m(e).index();\n            }\n            if ("auto" === l && (l = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) t.children("." + a.slideVisibleClass).each(function (t) {\n                var a = r ? m(t).attr("data-swiper-slide-index") : m(t).index();\n                e.lazy.loadInSlide(a);\n            });else if (l > 1) for (var p = s; p < s + l; p += 1) {\n                o(p) && e.lazy.loadInSlide(p);\n            } else e.lazy.loadInSlide(s);\n            if (n.loadPrevNext) if (l > 1 || n.loadPrevNextAmount && n.loadPrevNextAmount > 1) {\n                for (var u = n.loadPrevNextAmount, c = l, h = Math.min(s + c + Math.max(u, c), i.length), v = Math.max(s - Math.max(c, u), 0), f = s + l; f < h; f += 1) {\n                    o(f) && e.lazy.loadInSlide(f);\n                }for (var g = v; g < s; g += 1) {\n                    o(g) && e.lazy.loadInSlide(g);\n                }\n            } else {\n                var b = t.children("." + a.slideNextClass);\n                b.length > 0 && e.lazy.loadInSlide(d(b));\n                var w = t.children("." + a.slidePrevClass);\n                w.length > 0 && e.lazy.loadInSlide(d(w));\n            }\n        },\n        checkInViewOnLoad: function checkInViewOnLoad() {\n            var e = l(),\n                t = this;\n            if (t && !t.destroyed) {\n                var a = t.params.lazy.scrollingElement ? m(t.params.lazy.scrollingElement) : m(e),\n                    i = a[0] === e,\n                    s = i ? e.innerWidth : a[0].offsetWidth,\n                    r = i ? e.innerHeight : a[0].offsetHeight,\n                    n = t.$el.offset(),\n                    o = !1;\n                t.rtlTranslate && (n.left -= t.$el[0].scrollLeft);\n                for (var d = [[n.left, n.top], [n.left + t.width, n.top], [n.left, n.top + t.height], [n.left + t.width, n.top + t.height]], p = 0; p < d.length; p += 1) {\n                    var u = d[p];\n                    if (u[0] >= 0 && u[0] <= s && u[1] >= 0 && u[1] <= r) {\n                        if (0 === u[0] && 0 === u[1]) continue;\n                        o = !0;\n                    }\n                }\n                var c = !("touchstart" !== t.touchEvents.start || !t.support.passiveListener || !t.params.passiveListeners) && {\n                    passive: !0,\n                    capture: !1\n                };\n                o ? (t.lazy.load(), a.off("scroll", t.lazy.checkInViewOnLoad, c)) : t.lazy.scrollHandlerAttached || (t.lazy.scrollHandlerAttached = !0, a.on("scroll", t.lazy.checkInViewOnLoad, c));\n            }\n        }\n    },\n        re = {\n        LinearSpline: function LinearSpline(e, t) {\n            var a,\n                i,\n                s,\n                r,\n                n,\n                l = function l(e, t) {\n                for (i = -1, a = e.length; a - i > 1;) {\n                    e[s = a + i >> 1] <= t ? i = s : a = s;\n                }return a;\n            };\n            return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {\n                return e ? (n = l(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0;\n            }, this;\n        },\n        getInterpolateFunction: function getInterpolateFunction(e) {\n            var t = this;\n            t.controller.spline || (t.controller.spline = t.params.loop ? new re.LinearSpline(t.slidesGrid, e.slidesGrid) : new re.LinearSpline(t.snapGrid, e.snapGrid));\n        },\n        setTranslate: function setTranslate(e, t) {\n            var a,\n                i,\n                s = this,\n                r = s.controller.control,\n                n = s.constructor;\n            function l(e) {\n                var t = s.rtlTranslate ? -s.translate : s.translate;\n                "slide" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && "container" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses();\n            }\n            if (Array.isArray(r)) for (var o = 0; o < r.length; o += 1) {\n                r[o] !== t && r[o] instanceof n && l(r[o]);\n            } else r instanceof n && t !== r && l(r);\n        },\n        setTransition: function setTransition(e, t) {\n            var a,\n                i = this,\n                s = i.constructor,\n                r = i.controller.control;\n            function n(t) {\n                t.setTransition(e, i), 0 !== e && (t.transitionStart(), t.params.autoHeight && E(function () {\n                    t.updateAutoHeight();\n                }), t.$wrapperEl.transitionEnd(function () {\n                    r && (t.params.loop && "slide" === i.params.controller.by && t.loopFix(), t.transitionEnd());\n                }));\n            }\n            if (Array.isArray(r)) for (a = 0; a < r.length; a += 1) {\n                r[a] !== t && r[a] instanceof s && n(r[a]);\n            } else r instanceof s && t !== r && n(r);\n        }\n    },\n        ne = {\n        getRandomNumber: function getRandomNumber(e) {\n            void 0 === e && (e = 16);\n            return "x".repeat(e).replace(/x/g, function () {\n                return Math.round(16 * Math.random()).toString(16);\n            });\n        },\n        makeElFocusable: function makeElFocusable(e) {\n            return e.attr("tabIndex", "0"), e;\n        },\n        makeElNotFocusable: function makeElNotFocusable(e) {\n            return e.attr("tabIndex", "-1"), e;\n        },\n        addElRole: function addElRole(e, t) {\n            return e.attr("role", t), e;\n        },\n        addElRoleDescription: function addElRoleDescription(e, t) {\n            return e.attr("aria-roledescription", t), e;\n        },\n        addElControls: function addElControls(e, t) {\n            return e.attr("aria-controls", t), e;\n        },\n        addElLabel: function addElLabel(e, t) {\n            return e.attr("aria-label", t), e;\n        },\n        addElId: function addElId(e, t) {\n            return e.attr("id", t), e;\n        },\n        addElLive: function addElLive(e, t) {\n            return e.attr("aria-live", t), e;\n        },\n        disableEl: function disableEl(e) {\n            return e.attr("aria-disabled", !0), e;\n        },\n        enableEl: function enableEl(e) {\n            return e.attr("aria-disabled", !1), e;\n        },\n        onEnterOrSpaceKey: function onEnterOrSpaceKey(e) {\n            if (13 === e.keyCode || 32 === e.keyCode) {\n                var t = this,\n                    a = t.params.a11y,\n                    i = m(e.target);\n                t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is(P(t.params.pagination.bulletClass)) && i[0].click();\n            }\n        },\n        notify: function notify(e) {\n            var t = this.a11y.liveRegion;\n            0 !== t.length && (t.html(""), t.html(e));\n        },\n        updateNavigation: function updateNavigation() {\n            var e = this;\n            if (!e.params.loop && e.navigation) {\n                var t = e.navigation,\n                    a = t.$nextEl,\n                    i = t.$prevEl;\n                i && i.length > 0 && (e.isBeginning ? (e.a11y.disableEl(i), e.a11y.makeElNotFocusable(i)) : (e.a11y.enableEl(i), e.a11y.makeElFocusable(i))), a && a.length > 0 && (e.isEnd ? (e.a11y.disableEl(a), e.a11y.makeElNotFocusable(a)) : (e.a11y.enableEl(a), e.a11y.makeElFocusable(a)));\n            }\n        },\n        updatePagination: function updatePagination() {\n            var e = this,\n                t = e.params.a11y;\n            e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each(function (a) {\n                var i = m(a);\n                e.a11y.makeElFocusable(i), e.params.pagination.renderBullet || (e.a11y.addElRole(i, "button"), e.a11y.addElLabel(i, t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, i.index() + 1)));\n            });\n        },\n        init: function init() {\n            var e = this,\n                t = e.params.a11y;\n            e.$el.append(e.a11y.liveRegion);\n            var a = e.$el;\n            t.containerRoleDescriptionMessage && e.a11y.addElRoleDescription(a, t.containerRoleDescriptionMessage), t.containerMessage && e.a11y.addElLabel(a, t.containerMessage);\n            var i = e.$wrapperEl,\n                s = i.attr("id") || "swiper-wrapper-" + e.a11y.getRandomNumber(16),\n                r = e.params.autoplay && e.params.autoplay.enabled ? "off" : "polite";\n            e.a11y.addElId(i, s), e.a11y.addElLive(i, r), t.itemRoleDescriptionMessage && e.a11y.addElRoleDescription(m(e.slides), t.itemRoleDescriptionMessage), e.a11y.addElRole(m(e.slides), t.slideRole);\n            var n,\n                l,\n                o = e.params.loop ? e.slides.filter(function (t) {\n                return !t.classList.contains(e.params.slideDuplicateClass);\n            }).length : e.slides.length;\n            e.slides.each(function (a, i) {\n                var s = m(a),\n                    r = e.params.loop ? parseInt(s.attr("data-swiper-slide-index"), 10) : i,\n                    n = t.slideLabelMessage.replace(/\\{\\{index\\}\\}/, r + 1).replace(/\\{\\{slidesLength\\}\\}/, o);\n                e.a11y.addElLabel(s, n);\n            }), e.navigation && e.navigation.$nextEl && (n = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (l = e.navigation.$prevEl), n && n.length && (e.a11y.makeElFocusable(n), "BUTTON" !== n[0].tagName && (e.a11y.addElRole(n, "button"), n.on("keydown", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(n, t.nextSlideMessage), e.a11y.addElControls(n, s)), l && l.length && (e.a11y.makeElFocusable(l), "BUTTON" !== l[0].tagName && (e.a11y.addElRole(l, "button"), l.on("keydown", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(l, t.prevSlideMessage), e.a11y.addElControls(l, s)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on("keydown", P(e.params.pagination.bulletClass), e.a11y.onEnterOrSpaceKey);\n        },\n        destroy: function destroy() {\n            var e,\n                t,\n                a = this;\n            a.a11y.liveRegion && a.a11y.liveRegion.length > 0 && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off("keydown", a.a11y.onEnterOrSpaceKey), t && t.off("keydown", a.a11y.onEnterOrSpaceKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off("keydown", P(a.params.pagination.bulletClass), a.a11y.onEnterOrSpaceKey);\n        }\n    },\n        le = {\n        init: function init() {\n            var e = this,\n                t = l();\n            if (e.params.history) {\n                if (!t.history || !t.history.pushState) return e.params.history.enabled = !1, void (e.params.hashNavigation.enabled = !0);\n                var a = e.history;\n                a.initialized = !0, a.paths = le.getPathValues(e.params.url), (a.paths.key || a.paths.value) && (a.scrollToSlide(0, a.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || t.addEventListener("popstate", e.history.setHistoryPopState));\n            }\n        },\n        destroy: function destroy() {\n            var e = l();\n            this.params.history.replaceState || e.removeEventListener("popstate", this.history.setHistoryPopState);\n        },\n        setHistoryPopState: function setHistoryPopState() {\n            var e = this;\n            e.history.paths = le.getPathValues(e.params.url), e.history.scrollToSlide(e.params.speed, e.history.paths.value, !1);\n        },\n        getPathValues: function getPathValues(e) {\n            var t = l(),\n                a = (e ? new URL(e) : t.location).pathname.slice(1).split("/").filter(function (e) {\n                return "" !== e;\n            }),\n                i = a.length;\n            return {\n                key: a[i - 2],\n                value: a[i - 1]\n            };\n        },\n        setHistory: function setHistory(e, t) {\n            var a = this,\n                i = l();\n            if (a.history.initialized && a.params.history.enabled) {\n                var s;\n                s = a.params.url ? new URL(a.params.url) : i.location;\n                var r = a.slides.eq(t),\n                    n = le.slugify(r.attr("data-history"));\n                if (a.params.history.root.length > 0) {\n                    var o = a.params.history.root;\n                    "/" === o[o.length - 1] && (o = o.slice(0, o.length - 1)), n = o + "/" + e + "/" + n;\n                } else s.pathname.includes(e) || (n = e + "/" + n);\n                var d = i.history.state;\n                d && d.value === n || (a.params.history.replaceState ? i.history.replaceState({\n                    value: n\n                }, null, n) : i.history.pushState({\n                    value: n\n                }, null, n));\n            }\n        },\n        slugify: function slugify(e) {\n            return e.toString().replace(/\\s+/g, "-").replace(/[^\\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "");\n        },\n        scrollToSlide: function scrollToSlide(e, t, a) {\n            var i = this;\n            if (t) for (var s = 0, r = i.slides.length; s < r; s += 1) {\n                var n = i.slides.eq(s);\n                if (le.slugify(n.attr("data-history")) === t && !n.hasClass(i.params.slideDuplicateClass)) {\n                    var l = n.index();\n                    i.slideTo(l, e, a);\n                }\n            } else i.slideTo(0, e, a);\n        }\n    },\n        oe = {\n        onHashChange: function onHashChange() {\n            var e = this,\n                t = r();\n            e.emit("hashChange");\n            var a = t.location.hash.replace("#", "");\n            if (a !== e.slides.eq(e.activeIndex).attr("data-hash")) {\n                var i = e.$wrapperEl.children("." + e.params.slideClass + \'[data-hash="\' + a + \'"]\').index();\n                if (void 0 === i) return;\n                e.slideTo(i);\n            }\n        },\n        setHash: function setHash() {\n            var e = this,\n                t = l(),\n                a = r();\n            if (e.hashNavigation.initialized && e.params.hashNavigation.enabled) if (e.params.hashNavigation.replaceState && t.history && t.history.replaceState) t.history.replaceState(null, null, "#" + e.slides.eq(e.activeIndex).attr("data-hash") || ""), e.emit("hashSet");else {\n                var i = e.slides.eq(e.activeIndex),\n                    s = i.attr("data-hash") || i.attr("data-history");\n                a.location.hash = s || "", e.emit("hashSet");\n            }\n        },\n        init: function init() {\n            var e = this,\n                t = r(),\n                a = l();\n            if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) {\n                e.hashNavigation.initialized = !0;\n                var i = t.location.hash.replace("#", "");\n                if (i) for (var s = 0, n = e.slides.length; s < n; s += 1) {\n                    var o = e.slides.eq(s);\n                    if ((o.attr("data-hash") || o.attr("data-history")) === i && !o.hasClass(e.params.slideDuplicateClass)) {\n                        var d = o.index();\n                        e.slideTo(d, 0, e.params.runCallbacksOnInit, !0);\n                    }\n                }\n                e.params.hashNavigation.watchState && m(a).on("hashchange", e.hashNavigation.onHashChange);\n            }\n        },\n        destroy: function destroy() {\n            var e = l();\n            this.params.hashNavigation.watchState && m(e).off("hashchange", this.hashNavigation.onHashChange);\n        }\n    },\n        de = {\n        run: function run() {\n            var e = this,\n                t = e.slides.eq(e.activeIndex),\n                a = e.params.autoplay.delay;\n            t.attr("data-swiper-autoplay") && (a = t.attr("data-swiper-autoplay") || e.params.autoplay.delay), clearTimeout(e.autoplay.timeout), e.autoplay.timeout = E(function () {\n                var t;\n                e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), t = e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit("autoplay")) : (t = e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.params.loop ? (e.loopFix(), t = e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(0, e.params.speed, !0, !0), e.emit("autoplay")) : (t = e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")), (e.params.cssMode && e.autoplay.running || !1 === t) && e.autoplay.run();\n            }, a);\n        },\n        start: function start() {\n            var e = this;\n            return void 0 === e.autoplay.timeout && !e.autoplay.running && (e.autoplay.running = !0, e.emit("autoplayStart"), e.autoplay.run(), !0);\n        },\n        stop: function stop() {\n            var e = this;\n            return !!e.autoplay.running && void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit("autoplayStop"), !0);\n        },\n        pause: function pause(e) {\n            var t = this;\n            t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? ["transitionend", "webkitTransitionEnd"].forEach(function (e) {\n                t.$wrapperEl[0].addEventListener(e, t.autoplay.onTransitionEnd);\n            }) : (t.autoplay.paused = !1, t.autoplay.run())));\n        },\n        onVisibilityChange: function onVisibilityChange() {\n            var e = this,\n                t = r();\n            "hidden" === t.visibilityState && e.autoplay.running && e.autoplay.pause(), "visible" === t.visibilityState && e.autoplay.paused && (e.autoplay.run(), e.autoplay.paused = !1);\n        },\n        onTransitionEnd: function onTransitionEnd(e) {\n            var t = this;\n            t && !t.destroyed && t.$wrapperEl && e.target === t.$wrapperEl[0] && (["transitionend", "webkitTransitionEnd"].forEach(function (e) {\n                t.$wrapperEl[0].removeEventListener(e, t.autoplay.onTransitionEnd);\n            }), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop());\n        },\n        onMouseEnter: function onMouseEnter() {\n            var e = this;\n            e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause(), ["transitionend", "webkitTransitionEnd"].forEach(function (t) {\n                e.$wrapperEl[0].removeEventListener(t, e.autoplay.onTransitionEnd);\n            });\n        },\n        onMouseLeave: function onMouseLeave() {\n            var e = this;\n            e.params.autoplay.disableOnInteraction || (e.autoplay.paused = !1, e.autoplay.run());\n        },\n        attachMouseEvents: function attachMouseEvents() {\n            var e = this;\n            e.params.autoplay.pauseOnMouseEnter && (e.$el.on("mouseenter", e.autoplay.onMouseEnter), e.$el.on("mouseleave", e.autoplay.onMouseLeave));\n        },\n        detachMouseEvents: function detachMouseEvents() {\n            var e = this;\n            e.$el.off("mouseenter", e.autoplay.onMouseEnter), e.$el.off("mouseleave", e.autoplay.onMouseLeave);\n        }\n    },\n        pe = {\n        setTranslate: function setTranslate() {\n            for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) {\n                var i = e.slides.eq(a),\n                    s = -i[0].swiperSlideOffset;\n                e.params.virtualTranslate || (s -= e.translate);\n                var r = 0;\n                e.isHorizontal() || (r = s, s = 0);\n                var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);\n                i.css({\n                    opacity: n\n                }).transform("translate3d(" + s + "px, " + r + "px, 0px)");\n            }\n        },\n        setTransition: function setTransition(e) {\n            var t = this,\n                a = t.slides,\n                i = t.$wrapperEl;\n            if (a.transition(e), t.params.virtualTranslate && 0 !== e) {\n                var s = !1;\n                a.transitionEnd(function () {\n                    if (!s && t && !t.destroyed) {\n                        s = !0, t.animating = !1;\n                        for (var e = ["webkitTransitionEnd", "transitionend"], a = 0; a < e.length; a += 1) {\n                            i.trigger(e[a]);\n                        }\n                    }\n                });\n            }\n        }\n    },\n        ue = {\n        setTranslate: function setTranslate() {\n            var e,\n                t = this,\n                a = t.$el,\n                i = t.$wrapperEl,\n                s = t.slides,\n                r = t.width,\n                n = t.height,\n                l = t.rtlTranslate,\n                o = t.size,\n                d = t.browser,\n                p = t.params.cubeEffect,\n                u = t.isHorizontal(),\n                c = t.virtual && t.params.virtual.enabled,\n                h = 0;\n            p.shadow && (u ? (0 === (e = i.find(".swiper-cube-shadow")).length && (e = m(\'<div class="swiper-cube-shadow"></div>\'), i.append(e)), e.css({\n                height: r + "px"\n            })) : 0 === (e = a.find(".swiper-cube-shadow")).length && (e = m(\'<div class="swiper-cube-shadow"></div>\'), a.append(e)));\n            for (var v = 0; v < s.length; v += 1) {\n                var f = s.eq(v),\n                    g = v;\n                c && (g = parseInt(f.attr("data-swiper-slide-index"), 10));\n                var b = 90 * g,\n                    w = Math.floor(b / 360);\n                l && (b = -b, w = Math.floor(-b / 360));\n                var y = Math.max(Math.min(f[0].progress, 1), -1),\n                    E = 0,\n                    x = 0,\n                    T = 0;\n                g % 4 == 0 ? (E = 4 * -w * o, T = 0) : (g - 1) % 4 == 0 ? (E = 0, T = 4 * -w * o) : (g - 2) % 4 == 0 ? (E = o + 4 * w * o, T = o) : (g - 3) % 4 == 0 && (E = -o, T = 3 * o + 4 * o * w), l && (E = -E), u || (x = E, E = 0);\n                var C = "rotateX(" + (u ? 0 : -b) + "deg) rotateY(" + (u ? b : 0) + "deg) translate3d(" + E + "px, " + x + "px, " + T + "px)";\n                if (y <= 1 && y > -1 && (h = 90 * g + 90 * y, l && (h = 90 * -g - 90 * y)), f.transform(C), p.slideShadows) {\n                    var S = u ? f.find(".swiper-slide-shadow-left") : f.find(".swiper-slide-shadow-top"),\n                        M = u ? f.find(".swiper-slide-shadow-right") : f.find(".swiper-slide-shadow-bottom");\n                    0 === S.length && (S = m(\'<div class="swiper-slide-shadow-\' + (u ? "left" : "top") + \'"></div>\'), f.append(S)), 0 === M.length && (M = m(\'<div class="swiper-slide-shadow-\' + (u ? "right" : "bottom") + \'"></div>\'), f.append(M)), S.length && (S[0].style.opacity = Math.max(-y, 0)), M.length && (M[0].style.opacity = Math.max(y, 0));\n                }\n            }\n            if (i.css({\n                "-webkit-transform-origin": "50% 50% -" + o / 2 + "px",\n                "-moz-transform-origin": "50% 50% -" + o / 2 + "px",\n                "-ms-transform-origin": "50% 50% -" + o / 2 + "px",\n                "transform-origin": "50% 50% -" + o / 2 + "px"\n            }), p.shadow) if (u) e.transform("translate3d(0px, " + (r / 2 + p.shadowOffset) + "px, " + -r / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + p.shadowScale + ")");else {\n                var z = Math.abs(h) - 90 * Math.floor(Math.abs(h) / 90),\n                    P = 1.5 - (Math.sin(2 * z * Math.PI / 360) / 2 + Math.cos(2 * z * Math.PI / 360) / 2),\n                    k = p.shadowScale,\n                    $ = p.shadowScale / P,\n                    L = p.shadowOffset;\n                e.transform("scale3d(" + k + ", 1, " + $ + ") translate3d(0px, " + (n / 2 + L) + "px, " + -n / 2 / $ + "px) rotateX(-90deg)");\n            }\n            var I = d.isSafari || d.isWebView ? -o / 2 : 0;\n            i.transform("translate3d(0px,0," + I + "px) rotateX(" + (t.isHorizontal() ? 0 : h) + "deg) rotateY(" + (t.isHorizontal() ? -h : 0) + "deg)");\n        },\n        setTransition: function setTransition(e) {\n            var t = this,\n                a = t.$el;\n            t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), t.params.cubeEffect.shadow && !t.isHorizontal() && a.find(".swiper-cube-shadow").transition(e);\n        }\n    },\n        ce = {\n        setTranslate: function setTranslate() {\n            for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) {\n                var s = t.eq(i),\n                    r = s[0].progress;\n                e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1));\n                var n = -180 * r,\n                    l = 0,\n                    o = -s[0].swiperSlideOffset,\n                    d = 0;\n                if (e.isHorizontal() ? a && (n = -n) : (d = o, o = 0, l = -n, n = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) {\n                    var p = e.isHorizontal() ? s.find(".swiper-slide-shadow-left") : s.find(".swiper-slide-shadow-top"),\n                        u = e.isHorizontal() ? s.find(".swiper-slide-shadow-right") : s.find(".swiper-slide-shadow-bottom");\n                    0 === p.length && (p = m(\'<div class="swiper-slide-shadow-\' + (e.isHorizontal() ? "left" : "top") + \'"></div>\'), s.append(p)), 0 === u.length && (u = m(\'<div class="swiper-slide-shadow-\' + (e.isHorizontal() ? "right" : "bottom") + \'"></div>\'), s.append(u)), p.length && (p[0].style.opacity = Math.max(-r, 0)), u.length && (u[0].style.opacity = Math.max(r, 0));\n                }\n                s.transform("translate3d(" + o + "px, " + d + "px, 0px) rotateX(" + l + "deg) rotateY(" + n + "deg)");\n            }\n        },\n        setTransition: function setTransition(e) {\n            var t = this,\n                a = t.slides,\n                i = t.activeIndex,\n                s = t.$wrapperEl;\n            if (a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), t.params.virtualTranslate && 0 !== e) {\n                var r = !1;\n                a.eq(i).transitionEnd(function () {\n                    if (!r && t && !t.destroyed) {\n                        r = !0, t.animating = !1;\n                        for (var e = ["webkitTransitionEnd", "transitionend"], a = 0; a < e.length; a += 1) {\n                            s.trigger(e[a]);\n                        }\n                    }\n                });\n            }\n        }\n    },\n        he = {\n        setTranslate: function setTranslate() {\n            for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.slidesSizesGrid, r = e.params.coverflowEffect, n = e.isHorizontal(), l = e.translate, o = n ? t / 2 - l : a / 2 - l, d = n ? r.rotate : -r.rotate, p = r.depth, u = 0, c = i.length; u < c; u += 1) {\n                var h = i.eq(u),\n                    v = s[u],\n                    f = (o - h[0].swiperSlideOffset - v / 2) / v * r.modifier,\n                    g = n ? d * f : 0,\n                    b = n ? 0 : d * f,\n                    w = -p * Math.abs(f),\n                    y = r.stretch;\n                "string" == typeof y && -1 !== y.indexOf("%") && (y = parseFloat(r.stretch) / 100 * v);\n                var E = n ? 0 : y * f,\n                    x = n ? y * f : 0,\n                    T = 1 - (1 - r.scale) * Math.abs(f);\n                Math.abs(x) < .001 && (x = 0), Math.abs(E) < .001 && (E = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0), Math.abs(T) < .001 && (T = 0);\n                var C = "translate3d(" + x + "px," + E + "px," + w + "px)  rotateX(" + b + "deg) rotateY(" + g + "deg) scale(" + T + ")";\n                if (h.transform(C), h[0].style.zIndex = 1 - Math.abs(Math.round(f)), r.slideShadows) {\n                    var S = n ? h.find(".swiper-slide-shadow-left") : h.find(".swiper-slide-shadow-top"),\n                        M = n ? h.find(".swiper-slide-shadow-right") : h.find(".swiper-slide-shadow-bottom");\n                    0 === S.length && (S = m(\'<div class="swiper-slide-shadow-\' + (n ? "left" : "top") + \'"></div>\'), h.append(S)), 0 === M.length && (M = m(\'<div class="swiper-slide-shadow-\' + (n ? "right" : "bottom") + \'"></div>\'), h.append(M)), S.length && (S[0].style.opacity = f > 0 ? f : 0), M.length && (M[0].style.opacity = -f > 0 ? -f : 0);\n                }\n            }\n        },\n        setTransition: function setTransition(e) {\n            this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e);\n        }\n    },\n        ve = {\n        init: function init() {\n            var e = this,\n                t = e.params.thumbs;\n            if (e.thumbs.initialized) return !1;\n            e.thumbs.initialized = !0;\n            var a = e.constructor;\n            return t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, M(e.thumbs.swiper.originalParams, {\n                watchSlidesProgress: !0,\n                slideToClickedSlide: !1\n            }), M(e.thumbs.swiper.params, {\n                watchSlidesProgress: !0,\n                slideToClickedSlide: !1\n            })) : C(t.swiper) && (e.thumbs.swiper = new a(M({}, t.swiper, {\n                watchSlidesVisibility: !0,\n                watchSlidesProgress: !0,\n                slideToClickedSlide: !1\n            })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on("tap", e.thumbs.onThumbClick), !0;\n        },\n        onThumbClick: function onThumbClick() {\n            var e = this,\n                t = e.thumbs.swiper;\n            if (t) {\n                var a = t.clickedIndex,\n                    i = t.clickedSlide;\n                if (!(i && m(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) {\n                    var s;\n                    if (s = t.params.loop ? parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"), 10) : a, e.params.loop) {\n                        var r = e.activeIndex;\n                        e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex);\n                        var n = e.slides.eq(r).prevAll(\'[data-swiper-slide-index="\' + s + \'"]\').eq(0).index(),\n                            l = e.slides.eq(r).nextAll(\'[data-swiper-slide-index="\' + s + \'"]\').eq(0).index();\n                        s = void 0 === n ? l : void 0 === l ? n : l - r < r - n ? l : n;\n                    }\n                    e.slideTo(s);\n                }\n            }\n        },\n        update: function update(e) {\n            var t = this,\n                a = t.thumbs.swiper;\n            if (a) {\n                var i = "auto" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView,\n                    s = t.params.thumbs.autoScrollOffset,\n                    r = s && !a.params.loop;\n                if (t.realIndex !== a.realIndex || r) {\n                    var n,\n                        l,\n                        o = a.activeIndex;\n                    if (a.params.loop) {\n                        a.slides.eq(o).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, o = a.activeIndex);\n                        var d = a.slides.eq(o).prevAll(\'[data-swiper-slide-index="\' + t.realIndex + \'"]\').eq(0).index(),\n                            p = a.slides.eq(o).nextAll(\'[data-swiper-slide-index="\' + t.realIndex + \'"]\').eq(0).index();\n                        n = void 0 === d ? p : void 0 === p ? d : p - o == o - d ? a.params.slidesPerGroup > 1 ? p : o : p - o < o - d ? p : d, l = t.activeIndex > t.previousIndex ? "next" : "prev";\n                    } else l = (n = t.realIndex) > t.previousIndex ? "next" : "prev";\n                    r && (n += "next" === l ? s : -1 * s), a.visibleSlidesIndexes && a.visibleSlidesIndexes.indexOf(n) < 0 && (a.params.centeredSlides ? n = n > o ? n - Math.floor(i / 2) + 1 : n + Math.floor(i / 2) - 1 : n > o && a.params.slidesPerGroup, a.slideTo(n, e ? 0 : void 0));\n                }\n                var u = 1,\n                    c = t.params.thumbs.slideThumbActiveClass;\n                if (t.params.slidesPerView > 1 && !t.params.centeredSlides && (u = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (u = 1), u = Math.floor(u), a.slides.removeClass(c), a.params.loop || a.params.virtual && a.params.virtual.enabled) for (var h = 0; h < u; h += 1) {\n                    a.$wrapperEl.children(\'[data-swiper-slide-index="\' + (t.realIndex + h) + \'"]\').addClass(c);\n                } else for (var v = 0; v < u; v += 1) {\n                    a.slides.eq(t.realIndex + v).addClass(c);\n                }\n            }\n        }\n    },\n        fe = [U, Z, {\n        name: "mousewheel",\n        params: {\n            mousewheel: {\n                enabled: !1,\n                releaseOnEdges: !1,\n                invert: !1,\n                forceToAxis: !1,\n                sensitivity: 1,\n                eventsTarget: "container",\n                thresholdDelta: null,\n                thresholdTime: null\n            }\n        },\n        create: function create() {\n            z(this, {\n                mousewheel: {\n                    enabled: !1,\n                    lastScrollTime: x(),\n                    lastEventBeforeSnap: void 0,\n                    recentWheelEvents: [],\n                    enable: J.enable,\n                    disable: J.disable,\n                    handle: J.handle,\n                    handleMouseEnter: J.handleMouseEnter,\n                    handleMouseLeave: J.handleMouseLeave,\n                    animateSlider: J.animateSlider,\n                    releaseScroll: J.releaseScroll\n                }\n            });\n        },\n        on: {\n            init: function init(e) {\n                !e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable();\n            },\n            destroy: function destroy(e) {\n                e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable();\n            }\n        }\n    }, {\n        name: "navigation",\n        params: {\n            navigation: {\n                nextEl: null,\n                prevEl: null,\n                hideOnClick: !1,\n                disabledClass: "swiper-button-disabled",\n                hiddenClass: "swiper-button-hidden",\n                lockClass: "swiper-button-lock"\n            }\n        },\n        create: function create() {\n            z(this, {\n                navigation: t({}, Q)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.navigation.init(), e.navigation.update();\n            },\n            toEdge: function toEdge(e) {\n                e.navigation.update();\n            },\n            fromEdge: function fromEdge(e) {\n                e.navigation.update();\n            },\n            destroy: function destroy(e) {\n                e.navigation.destroy();\n            },\n            "enable disable": function enableDisable(e) {\n                var t = e.navigation,\n                    a = t.$nextEl,\n                    i = t.$prevEl;\n                a && a[e.enabled ? "removeClass" : "addClass"](e.params.navigation.lockClass), i && i[e.enabled ? "removeClass" : "addClass"](e.params.navigation.lockClass);\n            },\n            click: function click(e, t) {\n                var a = e.navigation,\n                    i = a.$nextEl,\n                    s = a.$prevEl,\n                    r = t.target;\n                if (e.params.navigation.hideOnClick && !m(r).is(s) && !m(r).is(i)) {\n                    if (e.pagination && e.params.pagination && e.params.pagination.clickable && (e.pagination.el === r || e.pagination.el.contains(r))) return;\n                    var n;\n                    i ? n = i.hasClass(e.params.navigation.hiddenClass) : s && (n = s.hasClass(e.params.navigation.hiddenClass)), !0 === n ? e.emit("navigationShow") : e.emit("navigationHide"), i && i.toggleClass(e.params.navigation.hiddenClass), s && s.toggleClass(e.params.navigation.hiddenClass);\n                }\n            }\n        }\n    }, {\n        name: "pagination",\n        params: {\n            pagination: {\n                el: null,\n                bulletElement: "span",\n                clickable: !1,\n                hideOnClick: !1,\n                renderBullet: null,\n                renderProgressbar: null,\n                renderFraction: null,\n                renderCustom: null,\n                progressbarOpposite: !1,\n                type: "bullets",\n                dynamicBullets: !1,\n                dynamicMainBullets: 1,\n                formatFractionCurrent: function formatFractionCurrent(e) {\n                    return e;\n                },\n                formatFractionTotal: function formatFractionTotal(e) {\n                    return e;\n                },\n                bulletClass: "swiper-pagination-bullet",\n                bulletActiveClass: "swiper-pagination-bullet-active",\n                modifierClass: "swiper-pagination-",\n                currentClass: "swiper-pagination-current",\n                totalClass: "swiper-pagination-total",\n                hiddenClass: "swiper-pagination-hidden",\n                progressbarFillClass: "swiper-pagination-progressbar-fill",\n                progressbarOppositeClass: "swiper-pagination-progressbar-opposite",\n                clickableClass: "swiper-pagination-clickable",\n                lockClass: "swiper-pagination-lock"\n            }\n        },\n        create: function create() {\n            z(this, {\n                pagination: t({\n                    dynamicBulletIndex: 0\n                }, ee)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.pagination.init(), e.pagination.render(), e.pagination.update();\n            },\n            activeIndexChange: function activeIndexChange(e) {\n                (e.params.loop || void 0 === e.snapIndex) && e.pagination.update();\n            },\n            snapIndexChange: function snapIndexChange(e) {\n                e.params.loop || e.pagination.update();\n            },\n            slidesLengthChange: function slidesLengthChange(e) {\n                e.params.loop && (e.pagination.render(), e.pagination.update());\n            },\n            snapGridLengthChange: function snapGridLengthChange(e) {\n                e.params.loop || (e.pagination.render(), e.pagination.update());\n            },\n            destroy: function destroy(e) {\n                e.pagination.destroy();\n            },\n            "enable disable": function enableDisable(e) {\n                var t = e.pagination.$el;\n                t && t[e.enabled ? "removeClass" : "addClass"](e.params.pagination.lockClass);\n            },\n            click: function click(e, t) {\n                var a = t.target;\n                if (e.params.pagination.el && e.params.pagination.hideOnClick && e.pagination.$el.length > 0 && !m(a).hasClass(e.params.pagination.bulletClass)) {\n                    if (e.navigation && (e.navigation.nextEl && a === e.navigation.nextEl || e.navigation.prevEl && a === e.navigation.prevEl)) return;\n                    !0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit("paginationShow") : e.emit("paginationHide"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass);\n                }\n            }\n        }\n    }, {\n        name: "scrollbar",\n        params: {\n            scrollbar: {\n                el: null,\n                dragSize: "auto",\n                hide: !1,\n                draggable: !1,\n                snapOnRelease: !0,\n                lockClass: "swiper-scrollbar-lock",\n                dragClass: "swiper-scrollbar-drag"\n            }\n        },\n        create: function create() {\n            z(this, {\n                scrollbar: t({\n                    isTouched: !1,\n                    timeout: null,\n                    dragTimeout: null\n                }, te)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate();\n            },\n            update: function update(e) {\n                e.scrollbar.updateSize();\n            },\n            resize: function resize(e) {\n                e.scrollbar.updateSize();\n            },\n            observerUpdate: function observerUpdate(e) {\n                e.scrollbar.updateSize();\n            },\n            setTranslate: function setTranslate(e) {\n                e.scrollbar.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                e.scrollbar.setTransition(t);\n            },\n            "enable disable": function enableDisable(e) {\n                var t = e.scrollbar.$el;\n                t && t[e.enabled ? "removeClass" : "addClass"](e.params.scrollbar.lockClass);\n            },\n            destroy: function destroy(e) {\n                e.scrollbar.destroy();\n            }\n        }\n    }, {\n        name: "parallax",\n        params: {\n            parallax: {\n                enabled: !1\n            }\n        },\n        create: function create() {\n            z(this, {\n                parallax: t({}, ae)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);\n            },\n            init: function init(e) {\n                e.params.parallax.enabled && e.parallax.setTranslate();\n            },\n            setTranslate: function setTranslate(e) {\n                e.params.parallax.enabled && e.parallax.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                e.params.parallax.enabled && e.parallax.setTransition(t);\n            }\n        }\n    }, {\n        name: "zoom",\n        params: {\n            zoom: {\n                enabled: !1,\n                maxRatio: 3,\n                minRatio: 1,\n                toggle: !0,\n                containerClass: "swiper-zoom-container",\n                zoomedSlideClass: "swiper-slide-zoomed"\n            }\n        },\n        create: function create() {\n            var e = this;\n            z(e, {\n                zoom: t({\n                    enabled: !1,\n                    scale: 1,\n                    currentScale: 1,\n                    isScaling: !1,\n                    gesture: {\n                        $slideEl: void 0,\n                        slideWidth: void 0,\n                        slideHeight: void 0,\n                        $imageEl: void 0,\n                        $imageWrapEl: void 0,\n                        maxRatio: 3\n                    },\n                    image: {\n                        isTouched: void 0,\n                        isMoved: void 0,\n                        currentX: void 0,\n                        currentY: void 0,\n                        minX: void 0,\n                        minY: void 0,\n                        maxX: void 0,\n                        maxY: void 0,\n                        width: void 0,\n                        height: void 0,\n                        startX: void 0,\n                        startY: void 0,\n                        touchesStart: {},\n                        touchesCurrent: {}\n                    },\n                    velocity: {\n                        x: void 0,\n                        y: void 0,\n                        prevPositionX: void 0,\n                        prevPositionY: void 0,\n                        prevTime: void 0\n                    }\n                }, ie)\n            });\n            var a = 1;\n            Object.defineProperty(e.zoom, "scale", {\n                get: function get() {\n                    return a;\n                },\n                set: function set(t) {\n                    if (a !== t) {\n                        var i = e.zoom.gesture.$imageEl ? e.zoom.gesture.$imageEl[0] : void 0,\n                            s = e.zoom.gesture.$slideEl ? e.zoom.gesture.$slideEl[0] : void 0;\n                        e.emit("zoomChange", t, i, s);\n                    }\n                    a = t;\n                }\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.params.zoom.enabled && e.zoom.enable();\n            },\n            destroy: function destroy(e) {\n                e.zoom.disable();\n            },\n            touchStart: function touchStart(e, t) {\n                e.zoom.enabled && e.zoom.onTouchStart(t);\n            },\n            touchEnd: function touchEnd(e, t) {\n                e.zoom.enabled && e.zoom.onTouchEnd(t);\n            },\n            doubleTap: function doubleTap(e, t) {\n                !e.animating && e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t);\n            },\n            transitionEnd: function transitionEnd(e) {\n                e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd();\n            },\n            slideChange: function slideChange(e) {\n                e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd();\n            }\n        }\n    }, {\n        name: "lazy",\n        params: {\n            lazy: {\n                checkInView: !1,\n                enabled: !1,\n                loadPrevNext: !1,\n                loadPrevNextAmount: 1,\n                loadOnTransitionStart: !1,\n                scrollingElement: "",\n                elementClass: "swiper-lazy",\n                loadingClass: "swiper-lazy-loading",\n                loadedClass: "swiper-lazy-loaded",\n                preloaderClass: "swiper-lazy-preloader"\n            }\n        },\n        create: function create() {\n            z(this, {\n                lazy: t({\n                    initialImageLoaded: !1\n                }, se)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1);\n            },\n            init: function init(e) {\n                e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && (e.params.lazy.checkInView ? e.lazy.checkInViewOnLoad() : e.lazy.load());\n            },\n            scroll: function scroll(e) {\n                e.params.freeMode && !e.params.freeModeSticky && e.lazy.load();\n            },\n            "scrollbarDragMove resize _freeModeNoMomentumRelease": function scrollbarDragMoveResize_freeModeNoMomentumRelease(e) {\n                e.params.lazy.enabled && e.lazy.load();\n            },\n            transitionStart: function transitionStart(e) {\n                e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load();\n            },\n            transitionEnd: function transitionEnd(e) {\n                e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load();\n            },\n            slideChange: function slideChange(e) {\n                var t = e.params,\n                    a = t.lazy,\n                    i = t.cssMode,\n                    s = t.watchSlidesVisibility,\n                    r = t.watchSlidesProgress,\n                    n = t.touchReleaseOnEdges,\n                    l = t.resistanceRatio;\n                a.enabled && (i || (s || r) && (n || 0 === l)) && e.lazy.load();\n            }\n        }\n    }, {\n        name: "controller",\n        params: {\n            controller: {\n                control: void 0,\n                inverse: !1,\n                by: "slide"\n            }\n        },\n        create: function create() {\n            z(this, {\n                controller: t({\n                    control: this.params.controller.control\n                }, re)\n            });\n        },\n        on: {\n            update: function update(e) {\n                e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n            },\n            resize: function resize(e) {\n                e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n            },\n            observerUpdate: function observerUpdate(e) {\n                e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n            },\n            setTranslate: function setTranslate(e, t, a) {\n                e.controller.control && e.controller.setTranslate(t, a);\n            },\n            setTransition: function setTransition(e, t, a) {\n                e.controller.control && e.controller.setTransition(t, a);\n            }\n        }\n    }, {\n        name: "a11y",\n        params: {\n            a11y: {\n                enabled: !0,\n                notificationClass: "swiper-notification",\n                prevSlideMessage: "Previous slide",\n                nextSlideMessage: "Next slide",\n                firstSlideMessage: "This is the first slide",\n                lastSlideMessage: "This is the last slide",\n                paginationBulletMessage: "Go to slide {{index}}",\n                slideLabelMessage: "{{index}} / {{slidesLength}}",\n                containerMessage: null,\n                containerRoleDescriptionMessage: null,\n                itemRoleDescriptionMessage: null,\n                slideRole: "group"\n            }\n        },\n        create: function create() {\n            z(this, {\n                a11y: t({}, ne, {\n                    liveRegion: m(\'<span class="\' + this.params.a11y.notificationClass + \'" aria-live="assertive" aria-atomic="true"></span>\')\n                })\n            });\n        },\n        on: {\n            afterInit: function afterInit(e) {\n                e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation());\n            },\n            toEdge: function toEdge(e) {\n                e.params.a11y.enabled && e.a11y.updateNavigation();\n            },\n            fromEdge: function fromEdge(e) {\n                e.params.a11y.enabled && e.a11y.updateNavigation();\n            },\n            paginationUpdate: function paginationUpdate(e) {\n                e.params.a11y.enabled && e.a11y.updatePagination();\n            },\n            destroy: function destroy(e) {\n                e.params.a11y.enabled && e.a11y.destroy();\n            }\n        }\n    }, {\n        name: "history",\n        params: {\n            history: {\n                enabled: !1,\n                root: "",\n                replaceState: !1,\n                key: "slides"\n            }\n        },\n        create: function create() {\n            z(this, {\n                history: t({}, le)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.params.history.enabled && e.history.init();\n            },\n            destroy: function destroy(e) {\n                e.params.history.enabled && e.history.destroy();\n            },\n            "transitionEnd _freeModeNoMomentumRelease": function transitionEnd_freeModeNoMomentumRelease(e) {\n                e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex);\n            },\n            slideChange: function slideChange(e) {\n                e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex);\n            }\n        }\n    }, {\n        name: "hash-navigation",\n        params: {\n            hashNavigation: {\n                enabled: !1,\n                replaceState: !1,\n                watchState: !1\n            }\n        },\n        create: function create() {\n            z(this, {\n                hashNavigation: t({\n                    initialized: !1\n                }, oe)\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.params.hashNavigation.enabled && e.hashNavigation.init();\n            },\n            destroy: function destroy(e) {\n                e.params.hashNavigation.enabled && e.hashNavigation.destroy();\n            },\n            "transitionEnd _freeModeNoMomentumRelease": function transitionEnd_freeModeNoMomentumRelease(e) {\n                e.hashNavigation.initialized && e.hashNavigation.setHash();\n            },\n            slideChange: function slideChange(e) {\n                e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash();\n            }\n        }\n    }, {\n        name: "autoplay",\n        params: {\n            autoplay: {\n                enabled: !1,\n                delay: 3e3,\n                waitForTransition: !0,\n                disableOnInteraction: !0,\n                stopOnLastSlide: !1,\n                reverseDirection: !1,\n                pauseOnMouseEnter: !1\n            }\n        },\n        create: function create() {\n            z(this, {\n                autoplay: t({}, de, {\n                    running: !1,\n                    paused: !1\n                })\n            });\n        },\n        on: {\n            init: function init(e) {\n                e.params.autoplay.enabled && (e.autoplay.start(), r().addEventListener("visibilitychange", e.autoplay.onVisibilityChange), e.autoplay.attachMouseEvents());\n            },\n            beforeTransitionStart: function beforeTransitionStart(e, t, a) {\n                e.autoplay.running && (a || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop());\n            },\n            sliderFirstMove: function sliderFirstMove(e) {\n                e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause());\n            },\n            touchEnd: function touchEnd(e) {\n                e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run();\n            },\n            destroy: function destroy(e) {\n                e.autoplay.detachMouseEvents(), e.autoplay.running && e.autoplay.stop(), r().removeEventListener("visibilitychange", e.autoplay.onVisibilityChange);\n            }\n        }\n    }, {\n        name: "effect-fade",\n        params: {\n            fadeEffect: {\n                crossFade: !1\n            }\n        },\n        create: function create() {\n            z(this, {\n                fadeEffect: t({}, pe)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                if ("fade" === e.params.effect) {\n                    e.classNames.push(e.params.containerModifierClass + "fade");\n                    var t = {\n                        slidesPerView: 1,\n                        slidesPerColumn: 1,\n                        slidesPerGroup: 1,\n                        watchSlidesProgress: !0,\n                        spaceBetween: 0,\n                        virtualTranslate: !0\n                    };\n                    M(e.params, t), M(e.originalParams, t);\n                }\n            },\n            setTranslate: function setTranslate(e) {\n                "fade" === e.params.effect && e.fadeEffect.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                "fade" === e.params.effect && e.fadeEffect.setTransition(t);\n            }\n        }\n    }, {\n        name: "effect-cube",\n        params: {\n            cubeEffect: {\n                slideShadows: !0,\n                shadow: !0,\n                shadowOffset: 20,\n                shadowScale: .94\n            }\n        },\n        create: function create() {\n            z(this, {\n                cubeEffect: t({}, ue)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                if ("cube" === e.params.effect) {\n                    e.classNames.push(e.params.containerModifierClass + "cube"), e.classNames.push(e.params.containerModifierClass + "3d");\n                    var t = {\n                        slidesPerView: 1,\n                        slidesPerColumn: 1,\n                        slidesPerGroup: 1,\n                        watchSlidesProgress: !0,\n                        resistanceRatio: 0,\n                        spaceBetween: 0,\n                        centeredSlides: !1,\n                        virtualTranslate: !0\n                    };\n                    M(e.params, t), M(e.originalParams, t);\n                }\n            },\n            setTranslate: function setTranslate(e) {\n                "cube" === e.params.effect && e.cubeEffect.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                "cube" === e.params.effect && e.cubeEffect.setTransition(t);\n            }\n        }\n    }, {\n        name: "effect-flip",\n        params: {\n            flipEffect: {\n                slideShadows: !0,\n                limitRotation: !0\n            }\n        },\n        create: function create() {\n            z(this, {\n                flipEffect: t({}, ce)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                if ("flip" === e.params.effect) {\n                    e.classNames.push(e.params.containerModifierClass + "flip"), e.classNames.push(e.params.containerModifierClass + "3d");\n                    var t = {\n                        slidesPerView: 1,\n                        slidesPerColumn: 1,\n                        slidesPerGroup: 1,\n                        watchSlidesProgress: !0,\n                        spaceBetween: 0,\n                        virtualTranslate: !0\n                    };\n                    M(e.params, t), M(e.originalParams, t);\n                }\n            },\n            setTranslate: function setTranslate(e) {\n                "flip" === e.params.effect && e.flipEffect.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                "flip" === e.params.effect && e.flipEffect.setTransition(t);\n            }\n        }\n    }, {\n        name: "effect-coverflow",\n        params: {\n            coverflowEffect: {\n                rotate: 50,\n                stretch: 0,\n                depth: 100,\n                scale: 1,\n                modifier: 1,\n                slideShadows: !0\n            }\n        },\n        create: function create() {\n            z(this, {\n                coverflowEffect: t({}, he)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                "coverflow" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + "coverflow"), e.classNames.push(e.params.containerModifierClass + "3d"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);\n            },\n            setTranslate: function setTranslate(e) {\n                "coverflow" === e.params.effect && e.coverflowEffect.setTranslate();\n            },\n            setTransition: function setTransition(e, t) {\n                "coverflow" === e.params.effect && e.coverflowEffect.setTransition(t);\n            }\n        }\n    }, {\n        name: "thumbs",\n        params: {\n            thumbs: {\n                swiper: null,\n                multipleActiveThumbs: !0,\n                autoScrollOffset: 0,\n                slideThumbActiveClass: "swiper-slide-thumb-active",\n                thumbsContainerClass: "swiper-container-thumbs"\n            }\n        },\n        create: function create() {\n            z(this, {\n                thumbs: t({\n                    swiper: null,\n                    initialized: !1\n                }, ve)\n            });\n        },\n        on: {\n            beforeInit: function beforeInit(e) {\n                var t = e.params.thumbs;\n                t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0));\n            },\n            slideChange: function slideChange(e) {\n                e.thumbs.swiper && e.thumbs.update();\n            },\n            update: function update(e) {\n                e.thumbs.swiper && e.thumbs.update();\n            },\n            resize: function resize(e) {\n                e.thumbs.swiper && e.thumbs.update();\n            },\n            observerUpdate: function observerUpdate(e) {\n                e.thumbs.swiper && e.thumbs.update();\n            },\n            setTransition: function setTransition(e, t) {\n                var a = e.thumbs.swiper;\n                a && a.setTransition(t);\n            },\n            beforeDestroy: function beforeDestroy(e) {\n                var t = e.thumbs.swiper;\n                t && e.thumbs.swiperCreated && t && t.destroy();\n            }\n        }\n    }];\n    return q.use(fe), q;\n});\n//# sourceMappingURL=swiper-bundle.min.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
}});